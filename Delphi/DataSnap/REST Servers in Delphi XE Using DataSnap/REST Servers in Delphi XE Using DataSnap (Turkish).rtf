{\rtf1\ansi\ansicpg1254\deff0\deflang1055{\fonttbl{\f0\fnil\fcharset238{\*\fname Courier New;}Courier New CE;}{\f1\fnil\fcharset162 Verdana;}{\f2\fnil\fcharset0 Verdana;}{\f3\fnil\fcharset162{\*\fname Courier New;}Courier New TUR;}{\f4\fnil MS Sans Serif;}{\f5\fnil\fcharset2 Symbol;}}
{\colortbl ;\red96\green96\blue96;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.21.2509;}\viewkind4\uc1\pard\cf1\lang1033\f0\fs32\par
\b === Programlama ve Tasar\u305?m ===\par
\b0\par
\fs24\par
\ul\b --- REST Servers in Delphi XE Using DataSnap ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20 Delphi XE'de DataSnap Kullanarak REST Server Olu\'feturma\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Y\'fcr\'fct\'fclebilir \'d6zet ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Representational State Transfer yani REST (Temsili Durum Transferi) end\'fcstride \'f6nemli bir etkisi olan Web Servisleri i\'e7in yeni bir teknolojidir. Google, Yahoo, Amazon ve \'feimdi Microsoft gibi b\'fcy\'fck sat\'fdc\'fdlar\'fdn pek \'e7ok halka a\'e7\'fdk web servisi \'e7oklu kaynaklardan bilgileri payla\'femak ve birle\'fetirmek i\'e7in REST teknolojisine g\'fcvenmektedir.\par
\tab REST mimarisinin uygulanmas\'fd HTTP ve XML gibi basit teknolojileri kullanmaya dayan\'fdr ve Delphi bunun i\'e7in tarihi olarak bir deste\'f0e sahiptir. Delphi 2010, DataSnap altyap\'fds\'fdn\'fd REST deste\'f0ini eklemi\'fe, ve Delphi XE bu modeli WebBroker entegrasyonu ve web servis taraf\'fdndan g\'f6sterilen metodlar i\'e7in JavaScript olu\'feturma \'f6zelli\'f0i ile bir ad\'fdm ileri ta\'fe\'fdm\'fd\'fet\'fdr.\par
\tab Bu belge Delphi XE \'fczerinde REST sunucular\'fd geli\'fetirmeyi, kutuda var olan \'f6zellikleri nas\'fdl kullanca\'f0\'fdm\'fdz\'fd, var olan \'f6zellikleri Delphi destek kodu ile nas\'fdl geni\'feletece\'f0imizi ve JQuery k\'fct\'fcphanesini alman\'fdn yararlar\'fdn\'fd anlatacakt\'fdr. DataSnap taraf\'fdndan teklif edilen modeller i\'e7erisinde bizim \'f6zellikle ilgililenece\'f0imiz alan, Delphi REST sunucusunu geli\'fetirmek, ve JavaScript ile JQuery esas al\'fdnarak yaz\'fdlan taray\'fdc\'fd tabanl\'fd uygulamalarla birbinine ba\'f0lamak, \'e7iftle\'fetirmektir. Unutmamak gerekir ki, ayn\'fd REST sunucular\'fd mobil cihaz tabanl\'fd uygulamalar gibi pek \'e7ok \'e7e\'feitli palatformda da kullan\'fdlabilir.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Giri\'ba - REST'in Arkas\u305?ndaki Fikirler ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Son 10 y\'fdlda Web'deki patlamaya tan\'fdk olduk ki art\'fdk \'feu anda Web 2.0 olarak adland\'fdr\'fdl\'fdyor. \'ddzlemeye ba\'felad\'fd\'f0\'fdm\'fdz \'feey, farkl\'fd web siteleri aras\'fdndaki, web siteleri ve istemci uygulamalar aras\'fdndaki ve web siteleri ile i\'fele ilgili veritabanlar\'fd aras\'fdndaki otomatik etkile\'feim, ki bu global bir etkile\'feim olup bunu tamamen anlamak \'e7ok zordur.\par
\tab Web'de veri bizim g\'f6z atmam\'fdzdan \'e7ok daha h\'fdzl\'fd hareket eder, bu y\'fczden sat\'fd\'fe verileri, finansal bilgi, \'e7evrimi\'e7i topluluklar, sat\'fd\'fe kampanyalar\'fd ve di\'f0er pek \'e7ok uygulama gibi bilgiyi izleme, takip etme, monit\'f6rleme ile ilgili olarak pek \'e7ok program\'fdn iste\'f0i de bu y\'f6ndedir. Ayn\'fd zamanda sunucu taraftaki i\'feletim, istemci uygulamalar ve web taray\'fdc\'fd \'fczerinden do\'f0al olarak \'e7al\'fd\'fean uygulamalar taraf\'fdndan kald\'fdr\'fdlabilmektedir (kald\'fdra\'e7 kuvveti anlam\'fdnda).\par
\tab Web servis fikri biraz daha soyuttur. Teknolojilere bakt\'fd\'f0\'fdm\'fdz zaman geli\'fetiricileri etkileyen 2 adet teknoloji oldu\'f0unuz g\'f6r\'fcr\'fcz. \'ddlki Simple Object Access Protocol yani SOAP (Basit Nesne Eri\'feim Protokol\'fc) olup {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/soap/"}}{\fldrslt{\ul\cf2 http://www.w3.org/TR/soap/}}}\f1\fs20  adresinde tan\'fdt\'fdlmaktad\'fdr. Delphi'nin birka\'e7 y\'fdld\'fdr SOAP deste\'f0i bulunmakta, Delphi XE'de de g\'fcncel i\'e7 hatlar\'fd ile birlikte bu destek bulunmaktad\'fdr. Di\'f0er web servis \'e7\'f6z\'fcm\'fc ise REST yakla\'fe\'fdm\'fdd\'fdr.\par
\tab Bu belgede REST \'fczerine yo\'f0unla\'feaca\'f0\'fdz, \'e7\'fcnk\'fc daha esnektir ve istemci taray\'fdc\'fd uygulamalar\'fd i\'e7in en iyi \'feekilde uyugn bir arka u\'e7tur (ayr\'fdca pek \'e7ok di\'f0er senaryo i\'e7in de). Buradaki resmi isim ve teoriye giri\'fe tamamen yenidir. \'ddlerde bahsedilenler, herhangi bir resmi REST standard\'fd olmad\'fd\'f0\'fd ile alakal\'fdd\'fdr.\par
\tab Fikir, herhangi bir web kayna\'f0\'fdna eri\'feildi\'f0i zaman (bir taray\'fdc\'fd veya istemci bir uygulama vas\'fdtas\'fdyla), sunucu kaynakla ilgili olarak bir suret g\'f6nderecektir. (Bir HTML sayfas\'fd, bir resim, biraz ham data) istemci verilmi\'fe bir durumda al\'fdr bu sureti. \'ddstemci daha fazla bilgiye veya sayfaya (belki bir link (ba\'f0lant\'fd) kullanarak) eri\'feti\'f0inde durumu de\'f0i\'feir, bir \'f6nceki durumdan transfer edilerek. Roy Fielding'in s\'f6zleri ile;\par
\tab "REST iyi tasarlanm\'fd\'fe bir web uygulamas\'fdn\'fdn davran\'fd\'felar\'fdn\'fdn nas\'fdl bir resme \'e7a\'f0r\'fd\'fet\'fdr\'fdlaca\'f0\'fdn\'fd planlar; bir web sayfalar\'fd a\'f0\'fd (sanal durum makinas\'fd), kullan\'fdc\'fd uygulamada linkleri se\'e7erek i\'feletim yapt\'fd\'f0\'fdnda (durum ge\'e7i\'feleri), kullan\'fdc\'fdya kullanmalar\'fd i\'e7in transfer edilir ve bir sonraki sayfa ile sonu\'e7lan\'fdr (uygulaman\'fdn bir sonraki durumunu g\'f6sterme) "\par
\cf1\lang1033\f0\fs24\par
\ul\b --- REST Mimarisinin Anahtar Noktalar\u305? ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Bu y\'fczden REST bir mimari ise (hatta daha iyisi, mimari bir stil ise) bunun bir standard\'fd yoktur, bununla beraber HTTP, URL ve g\'fcncel veri i\'e7in pek \'e7ok art\'fd formatl\'fd standard\'fd kullanmaktad\'fdr.\par
\tab SOAP'\'fdn kar\'fe\'fdt\'fd olarak, REST mimarisi HTTP ve bunun data format\'fdn\'fd (genelde XML ve JSON) kullan\'fdr.\par
\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-200\li920 REST, sunucudaki bir kayna\'f0\'fd kimliklendirmek i\'e7in URL kullan\'fdr. (SOAP detayl\'fd olarak mektubunda anlat\'fdld\'fd\'f0\'fd \'fczere pek \'e7ok sitek i\'e7in tek bir URL kullan\'fdr.) Unutmamak gerekir ki burada fikir URL'yi kaynak \'fczerinde i\'felem yapmak i\'e7in de\'f0il, kayna\'f0\'fd kimliklendirmek i\'e7in kullan\'fdl\'fdyor.\par
{\pntext\f5\'B7\tab}REST, hangi i\'felemin ger\'e7ekle\'fetirilece\'f0i ile ilgili olarak HTTP metodlar\'fdn\'fd kullan\'fdr (retrieve (almak) veya HTTP get, create (olu\'feturmak) veya HTTP PUT, update (g\'fcncelleme) veya HTTP POST, delete (silme) veya HTTP DELETE)\par
{\pntext\f5\'B7\tab}REST, sunucudan daha detayl\'fd bilgi sa\'f0layabilmek i\'e7in HTTP parametrelerini kullan\'fdr (hem sorgu parametreleri hem de POST parametreleri)\par
{\pntext\f5\'B7\tab}REST, yetkilendirme, kriptolama ve g\'fcvenlik (HTTPS kullanarak) i\'e7in HTTP'ye g\'fcvenir.\par
{\pntext\f5\'B7\tab}REST, veriyi \'e7e\'feitli formatlar kullanarak (XML, JSON, resim ve daha pek \'e7ok format) sade d\'f6k\'fcman olarak geri d\'f6nd\'fcr\'fcr\par
\pard\tab\par
\tab Bu tarz bir senaryoda bir ka\'e7 mimari element daha d\'fc\'fe\'fcn\'fclmelidir. REST sistemden \'feunlar\'fd talep eder.\par
\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-200\li920 Do\'f0al bir istemci/sunucu ili\'fekisi (veritaban\'fd ile (RDBMS) direkt olarak herhangi bir i\'felem yap\'fdlmayacak)\par
{\pntext\f5\'B7\tab}Do\'f0al olarak durumsuz\par
{\pntext\f5\'B7\tab}Cache-dostu (S\'fdral\'fd olarak ayn\'fd \'feeyi iki kez \'e7a\'f0\'fdrd\'fd\'f0\'fdmda sunucu taraf\'fdnda data de\'f0i\'femedi\'f0i s\'fcrece ayn\'fd URL ayn\'fd datay\'fd geri d\'f6nd\'fcrmelidir, sunucu ve istemci aras\'fdna proxy ve cache sunucular\'fdn\'fdn eklenmesine m\'fcsade etmelidir, buradan \'e7\'fdkacak sonu\'e7 b\'fct\'fcn GET i\'felemlerinin herhangi bir etkide bulunmayaca\'f0\'fdd\'fdr.)\par
\pard\li720\par
\pard\tab Elbette burada k\'fdsaca belirtti\'f0imizin yan\'fdnda REST teorisi ile ilgili pek \'e7ok nokta daha olacakt\'fdr, ama bence bu kadar\'fd teoriye ba\'felaman\'fdz i\'e7in yeterlidir. Delphi kodu ile birlikte gelecek pratik \'f6rnekler ana fikirleri a\'e7\'fdkl\'fd\'f0a kavu\'feturacakt\'fdr.s \par
\cf1\lang1033\f0\fs24\par
\ul\b --- REST Teknolojileri ve Delphi ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Daha \'f6nce herhangi bir REST standard\'fd olmad\'fd\'f0\'fdn\'fd ve REST geli\'fetirmek i\'e7in herhangi bir \'f6zel araca ihtiya\'e7 olmad\'fd\'f0\'fdn\'fd anlatm\'fd\'fet\'fdk. Ama var olan baz\'fd standartlar REST \'fczerinde de tekrar edilebilir ve bundan k\'fdsaca bahsedece\'f0iz (Uzunca bahsetmek istersek her bir ba\'fel\'fdk bir kitap olacakt\'fdr.) \'d6zellikle odaklanaca\'f0\'fdm\'fdz nokta, Delphi'nin bu teknolojilere sa\'f0lad\'fd\'f0\'fd destektir.\par
\tab HTTP, Web'in kalbindeki standartt\'fdr ve herhangi bir giri\'fee ihtiya\'e7 bulunmamaktad\'fdr. Ayr\'fdca HTTP, sadece web taray\'fdc\'fdlar\'fd i\'e7in de\'f0il, di\'f0er uygulamalar i\'e7in de kullan\'fdlabilir.\par
\tab Delphi uygulamalar\'fdnda HTTP kullanan bir istemci uygulama yazman\'fdn en basit yolu, INDY HTTP istemci bile\'feeni olan IdHttp kullanmakt\'fdr. E\'f0er bu bile\'feenin bir URL adresini parametre g\'f6stererek Get metodunu \'e7a\'f0\'fdr\'fdrsak, herhangi bir web sayfas\'fdn\'fdn ve REST sunucular\'fdn\'fdn i\'e7eri\'f0ini alabiliriz. Bazen di\'f0er parametrelere de\'f0er atamak gerekebilir, yetkilendirme bilgisini girmek ve SSL deste\'f0i i\'e7in ba\'feka bir bile\'feen eklemek gerekebilir. (\'ddlerde baz\'fd \'f6rneklerde g\'f6rece\'f0iz) Bile\'feen Get d\'fd\'fe\'fdnda \'e7e\'feitli HTTP metodlar\'fdn\'fd da desteklemektedir.\par
\tab Unutmamak gerekir ki g\'fcvenli tarafta, IdHttp isteklerini bir thread i\'e7erisinde olu\'feturmak gerekir. \'c7\'fcnk\'fc Indy seti, thread bloklama kullan\'fdr, yani program\'fdn kullan\'fdc\'fd aray\'fcz\'fc istek geri d\'f6nene kadar sabitlenir (yava\'fe bir web sunucusunda veya b\'fcy\'fck veri transferinde bu i\'felem uzun zaman alabilir.) Bu belgedeki \'f6rneklerde basitlik ama\'e7l\'fd olarak thread kullanmayaca\'f0\'fdmi ama size tavsiye edece\'f0im yakla\'fe\'fdm thread kullanarak yap\'fdlacak yakla\'fe\'fdmd\'fdr.\par
\tab Sunucu taraf\'fdnda Delphi'de bir web sunucusu veya web sunucusu uzant\'fdlar\'fd olu\'feturmak i\'e7in pek \'e7ok mimari kullan\'fdlabilir. IdHttpServer bile\'feeni kullanarak tek ba\'fe\'fdna \'e7al\'fd\'fean bir web sunucusu olu\'feturmak veya CGI uygulamalar\'fd, ISAPI veya Apache mod\'fclleri gibi web sunucusu uzant\'fdlar\'fd olu\'feturmak m\'fcmk\'fcnd\'fcr. Delphi XE ile ba\'felad\'fd\'f0\'fdm\'fdzda WebBroker mimarisi iki modeli de destekler (Daha \'f6nce uzant\'fdlarla ilgili destek s\'fdn\'fdrl\'fdyd\'fd). Ger\'e7ekten, Delphi XE sihirbaz\'fd ile bir DataSnap REST sunucusu olu\'feturmak m\'fcmk\'fcnd\'fcr, b\'f6ylece dolayl\'fd olarak IdHttpServer bile\'feenini temel alan tek ba\'fe\'fdna \'e7al\'fd\'fean bir web sunucusu elde etmek m\'fcmk\'fcnd\'fcr.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Delphi'de JSON ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Web servisler XML veya JSON'dan herhangi birini kullan\'fdrken Delphi REST sunucular\'fdn\'fdn bu konuda varsay\'fdlan de\'f0eri ikincisidir. Bu y\'fczden buradaki Delphi ve REST ile ilgili giri\'fei, JSON (JavaScript Object Notation = JavaScript Nesne G\'f6sterimi) ile ilgili k\'fdsa bir giri\'fe yapmak i\'e7in sonland\'fdr\'fdyorum \par
\cf1\lang1033\f0\fs24\par
\ul\b --- JSON G\'f6sterimi ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab JSON, JavaScript nesnelerini tan\'fdtmak i\'e7in text tabanl\'fd bir g\'f6sterimdir, b\'f6ylece sabit olup bir uygulamadan \'f6b\'fcr\'fcne aktar\'fdlabilirler (Veya bir bilgisayardan di\'f0erine). Bir ka\'e7 y\'fdl \'f6nce karma\'fe\'fdk veri yap\'fdlar\'fdn\'fd kullanmak i\'e7in genelde XML g\'f6sterimi kullan\'fdl\'fdyordu, ama son y\'fdllarda JSON'un pop\'fclerli\'f0i artt\'fd \'e7\'fcnk\'fc daha s\'fdk\'fd, programlama dilleri kavramlar\'fdna daha uygun, JavaScript taray\'fdc\'fd tabanl\'fd uygulamalarda ve artan k\'fct\'fcphanelerle ara\'e7larla \'e7ok daha fazla programlama dili ile yaz\'fdlm\'fd\'fe uygulamalarla \'e7\'f6z\'fcmlenmesi daha kolayd\'fdr.\par
\tab JSON'la ilgili olarak daha fazla bilgi i\'e7in IEFT'in (Internet Engineering Task Force - \'ddnterner M\'fchendisli\'f0i G\'f6rev G\'fcc\'fc) RFC 4627 belgesi ve JSON'un resmi web sitesindeki d\'f6k\'fcmanlar\'fd takip edebilirsiniz. Adresler a\'fea\'f0\'fddad\'fdr.\par
\tab\par
\tab{\field{\*\fldinst{HYPERLINK "http://www.ietf.org/rfc/rfc4627.txt"}}{\fldrslt{\ul\cf2 http://www.ietf.org/rfc/rfc4627.txt}}}\f1\fs20   \par
\tab{\field{\*\fldinst{HYPERLINK "http://json.org"}}{\fldrslt{\ul\cf2 http://json.org}}}\f1\fs20   \par
\par
\tab Ayr\'fdca sadece k\'fdsa bir giri\'fei okuyabilirsiniz, JSON g\'f6receli olarak anla\'fe\'fdlmas\'fd kolay, 4 ilkel tip ve 2 yap\'fddan olu\'femaktad\'fdr. \'ddlkel t\'fcrler say\'fdlar, stringler, Boolean de\'f0erler (true veya false) ve null de\'f0eridir.\par
\tab\'ddki JSON veri yap\'fds\'fd da;\par
\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-200\li920 JSON Objects (JSON Nesneleri) : \'ddsim ve de\'f0er \'e7iftlerinden olu\'fean koleksiyonlard\'fdr, k\'fcme parantezi ile a\'e7\'fdl\'fdp kapat\'fdl\'fdr ve virg\'fcllerle ayr\'fdl\'fdr. (Bir \'e7iftin iki eleman\'fd iki nokta ile ayr\'fdl\'fdr) Koleksiyon, kay\'fdt veya nesneyi temsil eder.\par
{\pntext\f5\'B7\tab}JSON Arrays (JSON Dizileri) : Kare parantez i\'e7erisinde virg\'fcl ile ayr\'fdlan de\'f0erler listesidir. Liste, burada koleksiyon veya diziyi temsil eder.\par
\pard\li720\par
\pard\tab Burada iki \'e7iftten olu\'fean bir nesne (\'e7ift isimlerini i\'e7eren b\'fct\'fcn stringler \'e7ift t\'fdrnak i\'e7ine al\'fdnm\'fd\'fet\'fdr) ve bir say\'fd ile bir string'den olu\'fean 2 de\'f0erli bir listenin g\'f6sterimi verilmi\'fetir. \par
\par
\tab\{ "Name":"Marco", \par
  \tab "Value":100  \par
\tab\} \par
 \par
\tab [22, "foo"] \par
\par
\tab Elbette bu yap\'fdlar\'fd birle\'fetirebilirsiniz, nesne ve dizileri bir \'e7iftin de\'f0erleri veya bir dizinin elemanlar\'fd olarak g\'f6sterebilirsiniz.\par
\par
\tab\{ "Me": \{ \par
    \tab\tab "FirstName":"Marco", \par
    \tab\tab "LastName":"Cant\'f9", \par
    \tab\tab "Wife": "Lella", \par
    \tab\tab "Kids": [  \par
      \tab\tab\tab\{ "Name":"Benedetta",  \par
        \tab\tab\tab "Age":11 \par
      \tab\tab\tab\},  \par
      \tab\tab\tab\{ "Name":"Jacopo",  \par
        \tab\tab\tab "Age":7 \par
      \tab\tab\tab\} \par
    \tab\tab ] \par
\tab\}\} \par
\cf1\lang1033\f0\fs24\par
\ul\b --- Delphi 2010'da JSON ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Ge\'e7mi\'fete Delphi i\'e7in bir ka\'e7 JSON k\'fct\'fcphanesi olsa da, do\'f0al destek olan ilk versiyonu Delphi 2010'dur. Do\'f0al JSON deste\'f0i dbExpress framework'u ile ili\'fekili olmayan uygulamalarda kulllan\'fdlan, DBXJSON unit dosyas\'fd i\'e7erisinde tan\'fdmlanm\'fd\'fe bir dizi s\'fdn\'fdf ile sa\'f0lan\'fdr. \par
\tab DBXJSON unit dosyas\'fd, TJSONValue nesnesinden t\'fcreyen \'e7e\'feitli JSON veri t\'fcrleri ile \'e7al\'fd\'femay\'fd sa\'f0layacak s\'fdn\'fdflar\'fd tan\'fdmlar. (\'e7e\'feitli t\'fcrde \'f6zel de\'f0erler, diziler, \'e7iftler ve nesneler)\par
\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-200\li920 TJSONNull, TJSONNumber, TJSONTrue, TJSONFalse, TJSONString'i i\'e7eren ilkel t\'fcrler\par
{\pntext\f5\'B7\tab}TJSONObject (dahili olarak TJSONPair'i i\'e7erir) ve TJSONArray gibi veri yap\'fdlar\'fdn\'fd\par
\pard\par
\tab Burada farkl\'fd ilkel t\'fcrlerin \'e7\'fdkt\'fds\'fdn\'fd g\'f6steren, JsonTests projesindeki basit bir kod par\'e7as\'fd bulunmakta. Unutmamak gerekir ki LogAndFree \'f6zel destek metodunu ekleyerek ge\'e7ici olarak olu\'feturdu\'f0umuz her nesne elle serbest b\'fdrak\'fdlmal\'fdd\'fdr. (free)\par
\par
\tab procedure TFormJson.LogAndFree (jValue: TJSONValue); \par
\tab begin \par
  \tab\tab try \par
    \tab\tab\tab Log (jValue.ClassName + ' > ' + jValue.ToString); \par
  \tab\tab finally \par
    \tab\tab\tab jvalue.Free; \par
  \tab\tab end; \par
\tab end; \par
 \par
\tab procedure TFormJson.btnValuesClick(Sender: TObject); \par
\tab begin \par
  \tab\tab LogAndFree (TJSONNumber.Create(22)); \par
  \tab\tab LogAndFree (TJSONString.Create('sample text')); \par
  \tab\tab LogAndFree (TJSONTrue.Create); \par
  \tab\tab LogAndFree (TJSONFalse.Create); \par
  \tab\tab LogAndFree (TJSONNull.Create); \par
\tab end; \tab\par
\par
\tab Beklenen \'e7\'fdkt\'fd da \'feu \'feekilde olacakt\'fdr.\par
\par
\tab TJSONNumber > 22 \par
\tab TJSONString > "sample text" \par
\tab TJSONTrue > true \par
\tab TJSONFalse > false \par
\tab TJSONNull > null \par
\par
\tab Dizi ve di\'f0er nesneleri olu\'feturmak i\'e7in DBXJSON unit dosyas\'fd i\'e7erisindeki s\'fdn\'fdflar\'fd kullanmak da son derece kolayd\'fdr. Dizi, i\'e7erisinde de\'f0er ekleyebildi\'f0imiz bir yap\'fdd\'fdr (Dizileri ve nesneleri i\'e7erir)\par
\par
\tab procedure TFormJson.btnSimpleArrayClick(Sender: TObject); \par
\tab var \par
  \tab\tab jList: TJSONArray; \par
\tab begin \par
  \tab\tab jList := TJSONArray.Create; \par
  \tab\tab jList.Add(22); \par
  \tab\tab jList.Add('foo'); \par
  \tab\tab jList.Add(TJSonArray.Create (TJSONTrue.Create)); \par
    \tab\tab (jList.Get (2) as TJSonArray).Add (100); \par
  \tab\tab Log (jList.ToString); \par
  \tab\tab jList.Free; \par
\tab end; \par
\par
\tab JSON \'e7\'fdkt\'fds\'fd i\'e7i\'e7e iki tane i\'e7i\'e7e diziyi \'feu \'feekilde g\'f6sterir.\par
\par
\tab [22,"foo",[true,100]] \par
\par
\tab Unutmamak gerekir ki JSON ta\'fe\'fdy\'fdc\'fdlar\'fd (diziler ve nesneler) kendi dahili elemanlar\'fdna sahiptir, bu y\'fczden belle\'f0i temizlemek i\'e7in ta\'fe\'fdy\'fdc\'fdy\'fd serbest b\'fdrakarak, i\'e7erisinde bulunan b\'fct\'fcn JSON de\'f0erlerini de serbest b\'fdrakm\'fd\'fe olursunuz. \par
\tab E\'f0er bir nesneniz varsa, buna ekleyebilece\'f0iniz tek eleman bir \'e7ifttir, ama bu \'e7iftin de\'f0erleri i\'e7i\'e7e bir nesne gibi herhangi bir JSON de\'f0eri olabilir.\par
\par
\tab procedure TFormJson.btnSimpleObjectClick(Sender: TObject); \par
\tab var \par
  \tab\tab jsonObj, subObject: TJSONObject; \par
\tab begin \par
  \tab\tab jsonObj := TJSONObject.Create; \par
  \tab\tab jsonObj.AddPair(TJSONPair.Create ('Name', 'Marco')); \par
  \tab\tab jsonObj.AddPair(TJSONPair.Create ('Value',  \par
    \tab\tab TJSONNumber.Create(100))); \par
 \par
  \tab\tab subObject := TJSONObject.Create( \par
    \tab\tab TJSONPair.Create ('Subvalue', 'one')); \par
  \tab\tab jsonObj.AddPair( \par
    \tab\tab TJSONPair.Create ('Object', subObject)); \par
 \par
  \tab\tab Log (jsonObj.ToString); \par
  \tab\tab jsonObj.Free; \par
\tab end; \par
\par
\tab Bu nesnenin JSON g\'f6sterimi \'feu \'feekildedir (Okunabilirli\'f0i arts\'fdn diye elle biraz format\'fdn\'fd d\'fczelttim)\par
\par
\tab\{ "Name":"Marco", \par
  \tab\tab "Value":100, \par
  \tab\tab "Object": \{ \par
    \tab\tab "Subvalue":"one" \par
  \tab\tab\} \par
\tab\} \par
\cf1\lang1033\f0\fs24\par
\ul\b --- Delphi'de JSON'u Ayr\u305?\'bat\u305?rmak (Parse) ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab DBXJSON s\'fdn\'fdflar\'fdn\'fd kullanarak JSON veri yap\'fdlar\'fd olu\'feturmak ve ili\'fekili JSON g\'f6sterimini olu\'feturmak ilgin\'e7tir, ama daha ilgin\'e7 olan bunun tersini yapabilmek, yani JSON g\'f6sterimi olan bir string'i ayr\'fd\'fet\'fdrarak ili\'fekili Delphi nesnelerini olu\'feturmakt\'fdr.\par
\tab\'d6ncelikle bir JSON string'imiz olsun, biz bunu TJSONObject s\'fdn\'fdf\'fdn\'fdn ParseJSONValue s\'fdn\'fdf metoduna g\'f6nderelim, ve bu metoddan bize TJSONValue t\'fcr\'fcnde bir nesne d\'f6ns\'fcn. Olaylarda nerede JSON nesnesi d\'f6nd\'fcrd\'fc\'f0\'fcm\'fcz\'fc bilmemiz, bunu uygun bir t\'fcre aktarmam\'fdz (cast) gerekmektedir. ParseJSONValue s\'fdn\'fdf metodu String t\'fcr\'fcnden bir nesneyi parametre olarak kabul etmemektedir, ama ASCII veya UTF8 t\'fcr\'fcnden (UTF8 Delphi 2010'da yok, Delphi XE ile gelen bir \'f6zellik) bir byte dizisini kabul etmektedir. \'ddki durumda da string'i alarak uygun Encoding (dil kodlamas\'fd) s\'fdn\'fdf\'fdn\'fd kullanarak byte dizisine \'e7evirmemiz gerekmektedir. \'ddlgili kod a\'fea\'f0\'fddad\'fdr.\par
\par
\tab TEncoding.ASCII.GetBytes(strParam) // a string converted to ASCII \par
\tab TEncoding.UTF8.GetBytes(sUtf8) // any UTF8 (or Unicode) string \par
\par
\tab UTF8 string durumunda ParseJSONValue metoduna ek biri parametre g\'f6ndermek veya ParseJSONValueUTF8 metodunu \'e7a\'f0\'fdrmam\'fdz gerekmektedir. Sonu\'e7ta JsonTests \'f6rne\'f0indeki ana form \'fczerinde bulunan ilgili butonun Click olay tetikleyicisi olan btnParseObjClick metodunun ba\'felang\'fd\'e7 par\'e7as\'fd a\'fea\'f0\'fddaki gibidir.\par
\par
\tab var \par
  \tab\tab strParam: string; \par
  \tab\tab jsonObj: TJSONObject; \par
\tab begin \par
  \tab\tab strParam := '\{"value":3\}'; \par
  \tab\tab jsonObj := TJSONObject.ParseJSONValue( \par
    \tab\tab TEncoding.ASCII.GetBytes(strParam), 0) as TJSONObject; \par
\par
\tab Geri kalan kod b\'fct\'fcn nesneyi \'e7\'fdkt\'fd olarak verir (e\'f0er herhangi bir \'feey yanl\'fd\'fe gitmezse, orjinal JSON g\'f6sterimine geri d\'f6n\'fcl\'fcr), son (ve tek) isim/de\'f0er \'e7ifti ve TJSONObject nesnesi serbest b\'fdrak\'fdl\'fdr (tekrar belirtmek gerekir ki bu kodu unutmak bellek s\'fdz\'fdnt\'fdlar\'fdna \'e7ok kolay bir \'feekilde neden olur)\par
\par
\tab Log (jsonObj.ToString); \par
\tab Log (jsonObj.Get (jsonObj.Size - 1).ToString); \par
\tab jsonObj.Free; \par
\cf1\lang1033\f0\fs24\par
\ul\b --- Delphi XE'de DataSnap REST Sihirbaz\u305? ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Delphi'de REST ve JSON ile ilgili baz\'fd anahtar kavramlarla giri\'fe yapt\'fd\'f0\'fdma g\'f6re, \'feimdi Delphi XE'de DataSnap'in sundu\'f0u REST deste\'f0i ile ilgili olarak biraz pratik yapabiliriz. (Unutmamak gerekir ki DataSnap deste\'f0i sadece \'fcr\'fcn\'fcn Enterprise ve Architect versiyonlar\'fdnda bulunmaktad\'fdr.)\par
\tab Bal\'feama noktam\'fdz, yeni DataSnap REST Sihirbaz\'fd ile bir REST sunucusu olu\'feturmakt\'fdr. Alternatif olarak, HTTP deste\'f0i olan daha genel bir DataSnap sunucu uygulamas\'fd olu\'feturabiliriz ki, bu da bir REST sunucusu temin etmenin di\'f0er yoludur. Bununla beraber il yakla\'fe\'fdmla, JavaScript deste\'f0i olan ve HTMP template'leri kullanabilece\'f0imiz bir uygulama temin etmi\'fe oluruz. G\'f6rece\'f0iniz gibi bu geli\'femi\'fe destek, DataSnap REST sunucumuzu tam geli\'femi\'fe bir web uygulamas\'fdna d\'f6n\'fc\'fet\'fcrmek i\'e7in olduk\'e7a iyi bir ba\'felang\'fd\'e7 noktas\'fdd\'fdr.\par
\tab Sihirbazda sade bir DataSnap Sunucusu, DataSnap WebBroker uygulamas\'fd ve DataSnap REST Sunucusu olmak \'fczere 3 ayr\'fd sunucu se\'e7ene\'f0i oldu\'f0unu g\'f6r\'fcyorsunuz. Biz sonuncusunu se\'e7ece\'f0iz.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Sihirbaz\u305? \'c7al\u305?\'bat\u305?rmak ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Delphi XE'de ilk basit REST sunucumuzu olu\'feturmak i\'e7in, DataSnap REST Application se\'e7ene\'f0ini kullanabiliriz. Sihirbaz\'fdn ilk sayfas\'fdnda az \'e7ok DataSnap WebBroker Uygulamas\'fdna benzer bir \'feekilde tamam\'fd WebBroker mimarisine dayanan \'e7oklu alternatifler bulunmaktad\'fdr.\par
\tab IdHTTPServer bile\'feeni ile WebBroker entegrasyonunu kullanarak 2 adet tek-ba\'fe\'fdna (stand-alone) se\'e7ene\'f0imiz vard\'fdr, b\'f6ylece uygulama etkin bir \'feekilde bir web sunucusu olabilir. 3. se\'e7enek ISAPI'dir. Potansiyel olarak Web App Debugger ve Apache Module gibi di\'f0er Web Broker se\'e7eneklerini de kullanabilirsiniz.\par
\tab\'ddlk proje i\'e7in test ve hata ay\'fdklama i\'e7in en uygun se\'e7enek olan "Stand-Alone VCL Application" "Tek Ba\'fe\'fdna VCL Uygulamas\'fd" se\'e7ene\'f0ini se\'e7iyorum. Tek ba\'fe\'fdna \'e7al\'fd\'fean bir web servis olu\'feturuyorum, sonra bir port numaras\'fd se\'e7iyorum ve uygun olup olmad\'fd\'f0\'fdn\'fd test ediyorum. Sihirbaz\'fdn direkt olarak tavsiye etti\'f0i varsay\'fdlan port numaras\'fd 8080'dir ama makinan\'fdzda uygun olan herhangi bir port numaras\'fd da olabilir bu. Bu sadece sunucunun bir \'f6zelli\'f0idir ve sonradan de\'f0i\'fetirilebilir.\par
\tab\'dc\'e7\'fcnc\'fc ad\'fdm sunucunun kimlik do\'f0rulama ve yetkilendirme gibi baz\'fd \'f6zelliklerini belirlemektir.\par
\tab E\'f0er sihirbazda \'feimdi kimlik do\'f0rulamay\'fd sihirbazdan se\'e7ilebilir hale getiremiyorsan\'fdz \'fcz\'fclmeyin, bunu sonradan projeye kolay bir \'feekilde ekleyebilirsiniz. Di\'f0er taraftan, sihirbaz ilk kez kullan\'fdrken sunucu s\'fdn\'fdf\'fd bir ka\'e7 \'f6rnek metodla eklemek iyi bir fikirdir. Bu sunucu s\'fdn\'fdf\'fd metodlar\'fdn\'fd REST servis talepleri olarak d\'fd\'fear\'fdya g\'f6steren bir s\'fdn\'fdft\'fdr ve sonra projeye bir s\'fdn\'fdf daha (birden \'e7ok da olabilir) ekleyebilirsiniz.\par
\tab Sonra, e\'f0er \'f6rnek bir sunucu s\'fdn\'fdf\'fd se\'e7tiyseniz, Sihirbaz size hangi s\'fdn\'fdf\'fd ata s\'fdn\'fdf olarak kabul edece\'f0inizi, ona g\'f6re s\'fdn\'fdf\'fd olu\'feturaca\'f0\'fdn\'fd soracak. Mevcut se\'e7enekler, TComponent, TDataModule ta\'fe\'fdy\'fdc\'fds\'fd (veri eri\'feim bile\'feenleri ekleyebildi\'f0iniz gibi g\'f6rsel olmayan bile\'feenleri de kolayca ekleyebilirsiniz.), ve DataSnap Sunucu Mod\'fcl\'fcd\'fcr. (TDSServerModule) Son se\'e7enek DataSnap REST uygulamas\'fd i\'e7in mant\'fdkl\'fdd\'fdr, di\'f0er t\'fcrden DataSnap sunucular\'fd i\'e7in ilgin\'e7 bir se\'e7enektir. \par
\tab\'ddlk proje i\'e7in ana s\'fdn\'fdf olarak TComponent ata s\'fdn\'fdf\'fdn\'fd se\'e7iyorum. Sihirbaz\'fdn son sayfas\'fdnda proje i\'e7in ana dizini se\'e7ebilirsiniz. Bir dizinin yolunu verdi\'f0inizde dizin ad\'fd (yol bilgisinin son alan\'fd) proje ad\'fd olarak \'e7iftlenir. Proje ad\'fdn\'fdn ge\'e7erli bir ad olmas\'fd gerekti\'f0inden, dizin ad\'fd i\'e7erisinde bo\'feluk olmamal\'fd ve say\'fd ile ba\'felamamal\'fdd\'fdr.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Sihirbaz Taraf\u305?ndan Olu\'baturulan Kod ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Yukar\'fdda belirtilen ayarlarla Delphi 3 unit dosyas\'fdna sahip bir proje olu\'feturur. Bunlar\'fdn kaynak kodunu g\'f6rmek isterseniz, sihirbazda ayn\'fd ad\'fdmlar\'fd takip edin ve bu makale i\'e7erisinde yer alan RestXeOne'\'fdn kaynak kodlar\'fdna bak\'fdn. \par
\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-200\li920 K\'fds\'fdtl\'fd y\'f6netim se\'e7eneklerine sahip bir ana form. Bu form, siz proje yap\'fds\'fdn\'fd ISAPI DLL'ine \'e7evirdi\'f0iniz zaman yok olur.\par
{\pntext\f5\'B7\tab}DataSnap sunucu bile\'feenlerini, bir ka\'e7 di\'f0er destek bile\'feenlerini, ve WebBroker uygulamas\'fdn\'fdn \'e7ekirde\'f0ine ev sahipli\'f0i yapan, TWebModule'den t\'fcretilmi\'fe bir web data mod\'fcl\'fc\par
{\pntext\f5\'B7\tab}REST sunucusuna metodlar\'fd ekleyebilece\'f0imiz, sunucu s\'fdn\'fdf\'fdn\'fdn bulundu\'f0u bir unit dosyas\'fd\par
\pard\li720\par
\pard\tab Ana form; \'e7al\'fd\'fema zaman\'fdnda port numaras\'fdn\'fd de\'f0i\'fetirecek bir editbox bile\'feeni, bir Ba\'felama (Start) ve Durdurma (Stop) buton bile\'feenleri, sunucuyu ba\'felatan ve varsay\'fdlan web sayfas\'fdn\'fd taray\'fdc\'fdn\'fdzda a\'e7acak bir butondan olu\'feur. Her hangi bir de\'f0i\'feiklik yapmadan \'f6nce formun tasar\'fdm zamanl\'fd g\'f6r\'fcn\'fcm\'fc \'feu \'feekildedir. (Bunun i\'e7in ilgili resme bak\'fdn)\par
\tab Application Event bile\'feeni, OnIdle olay tetikleyicisini kullanarak, sunucunun durumuna (status) g\'f6re kullan\'fdc\'fd aray\'fcz\'fcn\'fc g\'fcncellemek i\'e7in kullan\'fdl\'fdr. \'d6zel bir alanda (FServer) kaydedilen TIdHTTPWebBrokerBridge nesnesi de form i\'e7in \'f6nemli olan di\'f0er bir elemand\'fdr. Bu, TIdCustomHTTPServer'dan t\'fcretilen bir s\'fdn\'fdft\'fdr ve bu dahili web sunucusunun WebBroker mimarisi ile entegrasyonunu destekler. Di\'f0er 2 unit dosyas\'fd, mimariye tamamen n\'f6tr olup, bir ISAPI mod\'fcl\'fc veya WebBroker uygulamas\'fd i\'e7in de tamamen ayn\'fdd\'fdr.\par
\tab\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Sihirbaz Taraf\u305?ndan Olu\'baturulan Web Data Mod\'fcl\'fc ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab\'deimdi DataSnap REST Sihirbaz\'fd taraf\'fdndan olu\'feturulan web data mod\'fcl\'fcne programa biraz kod ekleyip test etmeden \'f6nce biraz daha detayl\'fd olarak bakal\'fdm. Web mod\'fcl\'fc WebBroker mimarisinin \'e7ekirdek eleman\'fdd\'fdr. Yol isimlerine (pathname) ba\'f0l\'fd olarak birden \'e7ok hareket (action) tan\'fdmlayabilir, dispatcher (i\'felemci zamanlay\'fdc\'fds\'fd) bile\'feenleri ile di\'f0er yol isimlerini yakalayabilir, ve herhangi bir HTTP iste\'f0ine i\'felem \'f6ncesi ve i\'felem sonras\'fd uygulamalar\'fd yapabilir.\par
\tab Burada sunucunun ele ald\'fd\'f0\'fd yol isimleri ve uzant\'fdlar, bunlar\'fd y\'f6neten bile\'feen veya hareketler ve bilginin kayna\'f0\'fd bulunmaktad\'fdr.\par
\par
\tab Yol veya uzant\'fd\tab\tab\tab Bile\'feen veya Hareket\tab\tab\tab\tab Hedef\par
\tab\par
\tab /\tab\tab\tab\tab\tab DefaultAction (Varsay\'fdlan hareket)\tab\tab WebModuleDefaultAction metodu\par
\tab /ServerFunctionInvoker  \tab\tab ServerFunctionInvokerAction  \tab\tab ServerFunctionInvoker sayfa \'fcreticisi\par
\tab /ReverseString  \tab\tab\tab ReverseStringAction \tab\tab\tab\tab ReverseString sayfa \'fcreticisi \par
\tab /datasnap*  \tab\tab\tab\tab DSHTTPWebDispatcher1  \tab\tab\tab DataSnap i\'felemleri\par
\tab /datasnap/rest  \tab\tab\tab DSHTTPWebDispatcher1  \tab\tab\tab DataSnap REST i\'felemleri\par
\tab *.css, *.js, *.png  \tab\tab\tab WebFileDispatcher1  \tab\tab\tab\tab Dosya sistemindeki (file system) dizinler\par
\par
\tab Varsay\'fdlan hareket \'e7ok s\'fdn\'fdrl\'fd bir role sahiptir. (\'ddste\'f0i yeniden y\'f6nlendirmek veya ReverseString (stringi tersine \'e7evirme) sayfa \'fcreticisinin \'e7\'fdkt\'fds\'fdn\'fd d\'f6nd\'fcrmek) Bu \'fcretici, ayn\'fd \'feekilde kendi yol ismine ve hareketine (action) ba\'f0lanm\'fd\'fet\'fdr, ilerde inceleyece\'f0imiz \'f6rnek bir HTML sayfas\'fd d\'f6nd\'fcrecektir.\par
\tab Bu web mod\'fclde \'e7ekirdek rol, DataSnap ve REST isteklerinin giri\'fe noktas\'fd oldu\'f0undan DSHTTPWebDispatcher1'e aittir. Bu bile\'feen "datasnap" (vasrsay\'fdlan de\'f0eri) ile ba\'felayan bir URL'den gelen bir iste\'f0i yakalay\'fdp, web mod\'fcl i\'e7erisinde bulunan DataSnap sunucu bile\'feenine (DSServer) g\'f6nderir. "datasnap" ile ba\'felayan ve "rest" (bu da bir varsay\'fdlan de\'f0erdir) ile devam eden isteklerde i\'feletim dahili REST makinas\'fdna y\'f6nlendirilir. Di\'f0er bir deyimle "datasnap/rest" yoluyla ba\'f0layan istekler, REST istekleri olarak tan\'fdmlan\'fdr.\par
\tab Tasar\'fdm zaman\'fdnda Sihirbaz taraf\'fdndan otomatik eklenen bile\'feenlerle birlikte web mod\'fcl\'fcn g\'f6r\'fcn\'fcm\'fc a\'fea\'f0\'fddaki gibidir (\'ddlgili resme bak\'fdn)\par
\tab Burada \'e7e\'feitli bile\'feenlerin rolleri yer almaktad\'fdr.\par
\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-200\li920 DSServer1, bu mimarideki b\'fct\'fcn \'e7e\'feitli bile\'feenleri bir araya getiren \'e7ekirdek DataSnap sunucu bile\'feenidir. Rol\'fcn\'fcn merkei olmas\'fdna ra\'f0men sadece bir ka\'e7 \'f6zelli\'f0i bulunmaktad\'fdr.\par
{\pntext\f5\'B7\tab}DSServerClass1, metodlar\'fdn\'fd REST servisleri olarak sunan, nesnelerinin ya\'feam d\'f6ng\'fcs\'fcnde onlar\'fd olu\'feturan ve y\'f6neten s\'fdn\'fdfa referans olan bir bile\'feendir. Bunun rol\'fc COM i\'e7erisindeki bir s\'fdn\'fdf fabrikas\'fdna (class factory) paraleldir. Esas s\'fdn\'fdf olan bu Sunucu S\'fdn\'fdf\'fd, bir referans parametresi ile bile\'feenin OnGetClass olay tetikleyicisinde d\'f6nd\'fcr\'fcr. \par
{\pntext\f5\'B7\tab}DSHTTPWebDispatcher1, daha \'f6nce de bahsedildi\'f0i gibi WebBroker mimarisi ile DataSnap sunucusu aras\'fdnda k\'f6pr\'fc vazifesi g\'f6rmektedir.\par
{\pntext\f5\'B7\tab}WebFileDispather1, sihirbaz taraf\'fdndan olu\'feturulan baz\'fd destek dosyalar\'fdn\'fd (JavaScript dosyalar\'fd, resimler, CSS'ler) ve bizim de ekleyebilece\'f0imiz dosyalar\'fd d\'f6nd\'fcrmek i\'e7in kullan\'fdlan bir WebBroker bile\'feenidir (Delphi XE ile gelen bir yenilik). Bu bile\'feenin bir i\'felem-\'f6ncesi olay tetikleyicisi uygulamay\'fd her tekrar-derleme ve tekrar-\'e7al\'fd\'fet\'fdrmada serverfunctions.js dosyas\'fdn\'fd g\'fcnceller. Bu JavaScript dosyas\'fd REST sunucusu taraf\'fdndan g\'f6sterilen metodlar\'fdn "proxy" aray\'fcz\'fcn\'fc (interface) i\'e7erir. Bu dosya altta bahsedilecek 2 bile\'feenin deste\'f0i ile g\'fcncellenir.\par
{\pntext\f5\'B7\tab}DSProxyGenerator1, \'e7e\'feitli programlama dilleri i\'e7in (Delphi, C++, JavaScript) proxy aray\'fczleri olu\'feturmak i\'e7in kullan\'fdlan yeni bir Delphi XE bile\'feenidir. Bu. \'e7a\'f0r\'fdlan URL adresini elle olu\'feturmaya gerek kalmadan, REST sunucusundaki bu metodlar\'fd bu dillerde ba\'felatmak i\'e7in kullan\'fdlan yard\'fdmc\'fd s\'fdn\'fdflard\'fdr (helper class). Bu olayda bile\'feenin Writer (yaz\'fdc\'fd) \'f6zelli\'f0ine "JavaScript REST" de\'f0eri atanm\'fd\'fet\'fdr. Bu bile\'feen bir alttaki bile\'feen ile birlikte \'e7al\'fd\'fe\'fdr.\par
{\pntext\f5\'B7\tab}DSServermetaDataProvider1, DSProxyGenerator1 bile\'feenine sunucunun \'e7ekirdek metadata bilgisini sunar. Bir destek bile\'feeni olup \'f6zelle\'femi\'fe herhangi bir ayarlamas\'fd yoktur.\par
{\pntext\f5\'B7\tab}ReverseString, template'ler i\'e7erisinde bulunan ReverseString.html dosyas\'fdna referansta bulunan bir sayfa olu\'feturucudur (page producer). Bu dosya, hernagi bir sunucu metodunuz i\'e7in tamamen bir web sunucusunu, HTML ve JavaScript'te yazabilece\'f0iniz \'f6rnek bir kullan\'fdc\'fd aray\'fcz\'fc ve uygulamay\'fd i\'e7erir ve sa\'f0lar. Bu \'e7o\'f0u uygulamada ba\'felang\'fd\'e7 noktam\'fdz olacakt\'fdr. Bu dosyan\'fdn detaylar\'fd ilerleyen b\'f6l\'fcmlerdedir.\par
{\pntext\f5\'B7\tab}ServerFunctionInvoker, metadatadan olu\'feturulan generic bir kullan\'fdc\'fd aray\'fcz\'fcne ev sahipli\'f0i yapan ikinci bir sayfa \'fcreticisidir. \'dcretilen sayfa, sunucudaki b\'fct\'fcn metodlar\'fd listeler ve girilen bir parametre ile \'e7\'fdkacak sonu\'e7lar\'fd JSON format\'fdnda g\'f6sterir. Bu sayfa bir geli\'fetirme ve hata ay\'fdklama arac\'fd olarak kullan\'fdlabilir ve son kullan\'fdc\'fd i\'e7in de\'f0ildir. (Ger\'e7ekte, sadece lokalde ba\'felat\'fdl\'fdrsa g\'f6sterilir)\par
\pard\li720\par
\pard\tab Bu bile\'feenlerle ilgili olarak pek \'e7ok teknik detay ve yap\'fdland\'fdrma ayarlar\'fd bulunmaktad\'fdr, ama bu makale i\'e7in yukar\'fdda anlatt\'fdklar\'fdm yeterli olacakt\'fdr. Sunucuyu \'e7al\'fd\'fet\'fdrman\'fdn ger\'e7ek etkisini \'f6l\'e7meden \'f6nce 2 eleman\'fd daha tart\'fd\'femam\'fdz gerekmektedir. Bunlar; metodlar\'fdn\'fdn g\'f6sterilece\'f0i sunucu s\'fdn\'fdf\'fdn kodu ve HTML ve JavaScript kullan\'fdc\'fd aray\'fcz\'fcn\'fcn rol\'fcd\'fcr (bu k\'fdsm\'fd sonra inceleyece\'f0iz).\par
\par
\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Sihirbaz Taraf\u305?ndan Olu\'baturulan \'d6rnek Sunucu S\u305?n\u305?f\u305? ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab DataSnap REST Uygulama sihirbaz\'fd taraf\'fdndan olu\'feturulan 3. unit dosyas\'fd, \'f6rnek sunucu s\'fdn\'fdf\'fd olup REST taraf\'fdndan \'e7a\'f0r\'fdlan s\'fdn\'fdf metodlar\'fdn\'fd i\'e7erir. B\'fct\'fcn kodun b\'fcy\'fck \'f6l\'e7\'fcde sonland\'fd\'f0\'fd yer olan, daha \'f6ncede de bahsetti\'f0imiz OnGetClass olay tetikleyicisinin bulundu\'f0u DSServerClass bile\'feenine ba\'f0lanan Delphi s\'fdn\'fdf\'fdd\'fdr. \par
\tab Olu\'feturulan s\'fdn\'fdf\'fdn iskeleti gayet basittir, sihirbazdaki \'f6rnek metodlar\'fd istedi\'f0imizi yans\'fdt\'fdr. \'ddlgili kod a\'fea\'f0\'fddad\'fdr.\par
\par
\tab type \par
\tab\{$METHODINFO ON\} \par
  \tab\tab TServerMethods1 = class(TComponent) \par
  \tab\tab private \par
    \tab\tab\tab\{ Private declarations \} \par
  \tab\tab public \par
    \tab\tab\tab\{ Public declarations \} \par
    \tab\tab\tab function EchoString(Value: string): string; \par
    \tab\tab\tab function ReverseString(Value: string): string; \par
  \tab\tab end; \par
\tab\{$METHODINFO OFF\}\par
\par
\tab Unutmamak gerekir ki bu s\'fdn\'fdf TComponent ana s\'fdn\'fdf\'fdndan t\'fcretilmi\'fetir ve public t\'fcrdeki metodlar i\'e7in extra RTTI bilgisi \'fcretecek \'f6zel bir derleyici se\'e7ene\'f0ine sahiptir (\{$METHODINFO ON\}) (Delphi 2010 RTTI'yi geni\'feletti)\par
\tab EchoString ve ReverseString metodlar\'fd girilen parametreyi veya tersini d\'f6nd\'fcren metodlard\'fdr. \'ddlerleyen b\'f6l\'fcmlerde hangi veri t\'fcrlerinin parametre olarak ge\'e7ilebilece\'f0ini ve d\'f6nece\'f0ini g\'f6rece\'f0iz.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- REST Sunucusunu Derlemek ve Test Etmek ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Art\'fdk sunucuyu derleyip \'e7al\'fd\'fe\'fdp \'e7al\'fd\'femad\'fd\'f0\'fdn\'fd g\'f6rebiliriz. Program\'fd derleyip \'e7al\'fd\'fet\'fdrd\'fdktan sonra Start (Ba\'fela) butonunu kullanarak sunucuyu a\'e7mak i\'e7in basit kullan\'fdc\'fd aray\'fcz\'fcn\'fc kullanabiliriz. Sonra, varsay\'fdlan web kullan\'fdc\'fd aray\'fcz\'fcn\'fc a\'e7ar\'fdz (Open Browser butonu ile), ama buna bakmadan \'f6nce REST y\'fcr\'fctmesinin nas\'fdl \'e7al\'fd\'fet\'fd\'f0\'fdna dair temelleri anlataca\'f0\'fdm.\par
\tab Test yapmak i\'e7in bir web taray\'fdc\'fds\'fd a\'e7\'fdp, sunucu metodlar\'fdndan birinin URL bilgisini elle taray\'fdc\'fdya gireriz. Bu URL bilgisi, uygulama konum adresi ve port numaras\'fd (localhost:8080), REST yolu (/datasnap/rest), sunucu s\'fdn\'fdf\'fdn\'fdn ad\'fd (TServerMethods1), \'e7al\'fd\'fet\'fdrmak istedi\'f0imiz metodun ad\'fd (mesela EchoString) ve metoda g\'f6nderilecek parametre bilgisinden (buras\'fd opsiyonel, parametresiz bir metod da olabilir) olu\'feur. \par
\par
\tab localhost:8080/datasnap/rest/TServerMethods1/EchoString/hello%20world \par
\par
\tab Buradaki %20 ifadesi, bo\'feluk yerine ge\'e7er, ama siz taray\'fdc\'fdn\'fdza bo\'feluk karakteri b\'fdrakabilirsiniz. Metodu \'e7al\'fd\'fet\'fddr\'fd\'f0\'fdn\'fdzda REST sunucusundan gelen JSON cevab\'fdn\'fd g\'f6rebilirsiniz. (Makalede ilgili resme bak\'fdn)\par
\tab Sunucudan d\'f6nen JSON de\'f0eri, i\'e7erisinde bir dizi de\'f0er olan "result" "sonu\'e7" alan\'fd olan bir nesnedir. Bu nesne, metodun sonucunu ve referans olarak g\'f6nderilen parametre'yi i\'e7erir (Bu biz dizidir \'e7\'fcnk\'fc d\'f6necek birden fazla de\'f0er olabilir.)\par
\cf1\lang1033\f0\fs24\par
\ul\b --- \'d6rnek HTML ve JavaScript \u304?stemcileri ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Elbette bu t\'fcr bir URL adresini direk taray\'fdc\'fdya yazmak mant\'fdkl\'fd de\'f0ildir, ama taray\'fdc\'fd tabanl\'fd bir uygulama geli\'fetirmenin de ba\'felang\'fd\'e7 noktas\'fdd\'fdr. Ger\'e7ekte bu t\'fcr bir \'f6rnek uygulama DataSnap REST Uygulama Sihirbaz\'fd taraf\'fdndan HTML ve JavaScript kodlar\'fd y\'f6n\'fcnden olu\'feturulur. E\'f0er web sunucusunun varsay\'fdlan hareketini taray\'fdc\'fd i\'e7erisinde \'e7al\'fd\'fet\'fdr\'fdrsak, a\'fea\'f0\'fddaki gibi bir \'feey g\'f6r\'fcr\'fcz (Makalede ilgili resme bak\'fdn)\par
\tab Bu iskeleti ReverseString.html dosyas\'fdnda saklanan ve uygulaman\'fdn web mod\'fcl\'fcndeki ReverseString sayfas\'fdndan d\'f6nen HTML sayfas\'fdd\'fdr. Sayfan\'fdn HTML kodu (e\'f0er ba\'f0lant\'fd ve ilerde bahsedilecek hususlarla ilgili kodlar\'fd yok sayarsak) olduk\'e7a basittir.\par
\par
\tab <#serverfunctioninvoker> \par
\tab <h1>DataSnap REST Project</h1> \par
\par
 \tab <div>Page loaded at <span id="timeElement"></span></div> \par
\tab <div id="contentdiv" class="contentdiv"> \par
  \tab\tab <table>  \par
    \tab\tab\tab <tr> \par
      \tab\tab\tab\tab <td> \par
        \tab\tab\tab\tab\tab <input id="valueField" type="text" value="A B C" /> \par
      \tab\tab\tab\tab </td> \par
      \tab\tab\tab\tab <td> \par
        \tab\tab\tab\tab\tab <button onclick='javascript:onReverseStringClick();'> \par
          \tab\tab\tab\tab ReverseString</button> \par
      \tab\tab\tab\tab </td> \tab\par
    \tab\tab\tab </tr>  \par
 \tab\tab </table> \par
\tab </div> \par
\par
\tab # karakteri ile verilen \'f6zel etiketler PageProducer'\'fdn (sayfa \'fcretici) OnTag olay tetikleyicisi taraf\'fdndan i\'felenir ve sayfaya her sordu\'f0unuzda dinamik olarak Delphi uygulamas\'fd ile yer de\'f0i\'fetirir. Bu etiketler s\'fdn\'fdf\'fdn y\'fcr\'fctece\'f0i etiketleri i\'e7erir, "server function invoker" "sunucu fonksiyon y\'fcr\'fct\'fcc\'fcs\'fc" test sayfas\'fdn\'fdn mevcutlu\'f0u ve bir ka\'e7 \'feey gibi.\par
\par
\tab procedure TWebModule2.ServerFunctionInvokerHTMLTag( \par
  \tab Sender: TObject; Tag: TTag; const TagString: string;  \par
  \tab TagParams: TStrings; var ReplaceText: string); \par
\tab begin \par
  \tab\tab if SameText(TagString, 'urlpath') then \par
    \tab\tab\tab ReplaceText := string(Request.InternalScriptName) \par
  \tab\tab else if SameText(TagString, 'port') then \par
    \tab\tab\tab ReplaceText := IntToStr(Request.ServerPort) \par
  \tab\tab else if SameText(TagString, 'host') then \par
    \tab\tab\tab ReplaceText := string(Request.Host) \par
  \tab\tab // and so on... \par
\par
\tab Yukar\'fddaki HTML kodunu okurken tahmin edebilece\'f0iniz gibi anahtar rol, a\'fea\'f0\'fddaki kodu i\'e7eren onReverseStringClick JavaScript metoduna aittir. (ayn\'fd HTML dosyas\'fdn\'fdn bir par\'e7as\'fd)\par
\par
\tab function onReverseStringClick() \par
\tab\{ \par
  \tab\tab var valueField = document.getElementById('valueField'); \par
  \tab\tab var s = serverMethods().ReverseString(valueField.value); \par
  \tab\tab valueField.value = s.result; \par
\tab\}\par
\par
\tab Bu metod girdi alan\'fdndaki referans\'fd saklar, buradaki de\'f0eri ReverseString metoduna parametre olarak g\'f6nderir, ve girdi alan\'fdndaki de\'f0eri sonu\'e7 ile g\'fcnceller. serverMethods fonksiyonu serverFunction.js kaynak kod dosyas\'fdnda (bu dosya sunucunun her tekrar derlenmesi ve \'e7al\'fd\'fet\'fdr\'fdlmas\'fdnda DSProxyGenerator bile\'feeni taraf\'fdndan g\'fcncellenir) tan\'fdmlanan bir JavaScript proxy nesnesinden bir varl\'fd\'f0\'fd d\'f6nd\'fcr\'fcr. \par
\tab Bu Proxy nesnesi, Delphi sunucu metodlar\'fdn\'fd, HTTP isteklerini e\'fe zamanl\'fd olmayan (asenkron) bir \'feekilde sarmalayarak (AJAX teknolojisini kullanarak) JavaScript taray\'fdc\'fd tabanl\'fd uygulamalar taraf\'fdndan kolayl\'fdkla eri\'feilebilir hale getirir.\par
\tab\par
\tab function TServerMethods1(connectionInfo) \par
  \tab\tab ... \par
  \tab\tab this.ReverseString = function(Value) \{ \par
    \tab\tab var returnObject = this.executor.executeMethod( \par
      \tab\tab 'ReverseString', "GET", [Value], arguments[1],  \par
      \tab\tab true, arguments[2], arguments[3]); \par
    \tab\tab if (arguments[1] == null) \{ \par
      \tab\tab\tab if (returnObject != null && returnObject.result != null  \par
          \tab\tab && isArray(returnObject.result)) \{ \par
        \tab\tab\tab\tab var resultArray = returnObject.result; \par
        \tab\tab\tab\tab var resultObject = new Object(); \par
        \tab\tab\tab\tab resultObject.Value = Value; \par
        \tab\tab\tab\tab resultObject.result = resultArray[0]; \par
        \tab\tab\tab\tab return resultObject; \par
      \tab\tab\tab\}\par
\tab\tab  \tab return returnObject; \par
    \tab\tab\} \par
  \tab\};\par
\par
\tab Bu, REST sunucusu taraf\'fdndan g\'f6sterilen s\'fdn\'fdflar\'fdn RTTI bilgilerinin Delphi taraf\'fdndan olu\'feturulmu\'fe JavaScript kodudur. Bu JavaScript metodu parametre ve d\'f6n\'fc\'fe de\'f0erini y\'f6netir, ilkini URL i\'e7inde ge\'e7erek ve ikincisini REST metodunun d\'f6nd\'fcrd\'fc\'f0\'fc JSON nesnesinden d\'f6nd\'fcrerek yapar. Bu JavaScript taray\'fdc\'fd uygulamalar\'fd taraf\'fdndan REST sunucu metodlar\'fdn\'fdn g\'f6receli olarak basit\'e7e \'e7a\'f0r\'fdld\'fd\'f0\'fdn\'fd g\'f6sterir.\par
\tab AJAX deste\'f0i sa\'f0lamak, JSON encoding (\'feifreleme) ve buna benzer pek \'e7ok \'e7a\'f0r\'fdlabilecek JavaScript destek dosyalar\'fd vard\'fdr, ama bunlar derinine inmek i\'e7in olduk\'e7a karma\'fe\'fdkt\'fdr ve bu makalenin konusu de\'f0ildir.  \par
\cf1\lang1033\f0\fs24\par
\ul\b --- Delphi \u304?stemcisinden REST Sunucusunu \'c7a\u287?\u305?rma ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Art\'fdk sunucuyu in\'fea etti\'f0imize, sunucu uygulaman\'fdn web uygulamas\'fdn\'fd bir istemci taray\'fdc\'fdya nas\'fdl g\'f6sterdi\'f0ini g\'f6rd\'fc\'f0\'fcm\'fcze g\'f6re ayn\'fd sunucu i\'e7in bir Delphi istemci uygulamas\'fd yazmaya ba\'felayabiliriz. Burada 2 farkl\'fd yakla\'fe\'fdm uygulayaca\'f0\'fdz.\par
\tab\'ddlk yakla\'fe\'fdm, Delphi XE'de tan\'fdmlanan \'f6zelle\'femi\'fe REST istemci deste\'f0ini kullanarak bir Delphi DataSnap istemcisi olu\'feturmakt\'fdr. \'ddkinci yakla\'fe\'fdm tek ba\'fe\'fdna bir REST istemcisi olu\'feturmak, IdHTTP bile\'feeni ile sunucuyu \'e7a\'f0\'fdrmak ve DBXJSON unit dosyas\'fdn\'fd kullanarak sonucu ayr\'fd\'fet\'fdrmakt\'fdr. RestXeOneClient demosunda, bu iki yakla\'fe\'fdm\'fd da kulland\'fdm, elle (manuel) olanla ba\'felad\'fdm ve sonra otomatik deste\'f0i ald\'fdm, ki bu genelde tercih edilendir.\par
\tab\'d6ncelikle standart bir VCL uygulamas\'fd olu\'feturdum ve ana formuna bir buton , bir edit box ve IdHTTP istemci bile\'feenini ekledim. Butonun OnClick olay tetikleyicisine a\'fea\'f0\'fddaki kodu yazd\'fdm.\par
\par
\tab const \par
  \tab\tab strServerUrl = '{\field{\*\fldinst{HYPERLINK "http://localhost:8080"}}{\fldrslt{\ul\cf2 http://localhost:8080}}}\f1\fs20 '; \par
  \tab\tab strMethodUrl = '/datasnap/rest/TServerMethods1/ReverseString/'; \par
 \par
\tab procedure TRestClientForm.btnManualClick(Sender: TObject); \par
\tab var \par
  \tab\tab strParam: string; \par
\tab begin \par
  \tab\tab strParam := edInput.Text; \par
  \tab\tab ShowMessage (IdHTTP1.Get(strServerUrl + strMethodUrl + strParam)); \par
\tab end;\par
\par
\tab Bu \'e7a\'f0r\'fd uygun bir URL adresini, sunucu adresi, REST sunucusu i\'e7erisinde verilen metodun adresi ve parametre bilgisi ile birle\'fetirerek olu\'feturur. E\'f0er edit box bile\'feeninin i\'e7erisine "Hello World" de\'f0erini yazarsan\'fdz, a\'fea\'f0\'fddaki resimdeki sonuca ula\'fe\'fdrs\'fdn\'fdz.\par
\tab\'deimdi daha da ilgin\'e7 olan\'fd sunucudan d\'f6nen JSON veri yap\'fds\'fdn\'fd daha \'f6nceki "Delphi'de JSON Ayr\'fd\'fet\'fdrma" konusunda i\'feledi\'f0miz \'feekilde Delphi'nin deste\'f0ini kullanarak ayr\'fd\'fet\'fdrmakt\'fdr. \par
\tab G\'f6rd\'fc\'f0\'fcm\'fcz gibi sunucudan d\'f6nen JSON verisi string'dir, ama REST sunucusu isimlendirilmi\'fe bir de\'f0eri olan bir nesne olu\'feturur ve bunu dizideki g\'fcncel de\'f0erine koyar. Bu y\'fczden metodun son versiyonunda HTTP'den gelen sonucu JSON veri yap\'fds\'fdna ayr\'fd\'fet\'fdrd\'fdktan sonra nesneden i\'e7erdi\'f0i \'e7ifte, ve \'e7iftten tek eleman dizisi haline \'e7evirmek gerekiyor. \'ddlgili kod a\'fea\'f0\'fddad\'fdr.\par
\par
\tab procedure TRestClientForm.btnManualClick(Sender: TObject); \par
\tab var \par
  \tab\tab strParam, strHttpResult, strResult: string; \par
  \tab\tab jValue: TJSONValue; \par
  \tab\tab jObj: TJSONObject; \par
  \tab\tab jPair: TJSONPair; \par
  \tab\tab jArray: TJSOnArray; \par
\tab begin \par
  \tab\tab strParam := edInput.Text; \par
  \tab\tab strHttpResult := IdHTTP1.Get(strServerUrl +  \par
    \tab\tab strMethodUrl + strParam); \par
  \tab\tab jValue := TJSONObject.ParseJSONValue( \par
    \tab\tab TEncoding.ASCII.GetBytes(strHttpResult), 0); \par
  \tab\tab try \par
    \tab\tab\tab jObj := jValue as TJSONObject; \par
    \tab\tab\tab jPair := jObj.Get(0); // get the first and only JSON pair \par
    \tab\tab\tab jArray := jPair.JsonValue as TJsonArray; // pair value is an array \par
    \tab\tab\tab strResult := jArray.Get(0).Value; // first-only element of array \par
    \tab\tab\tab edInput.Text := strResult; \par
  \tab\tab finally \par
    \tab\tab\tab jValue.Free; \par
  \tab\tab end; \par
\tab end;\par
\par
\tab Tekrar etmek gerekirse karma\'fe\'fdkl\'fdk, sunucudan d\'f6nen veri yap\'fds\'fdndan kaynaklanmaktad\'fdr, di\'f0er durumlarda oldu\'f0u gibi JSON sonucunu ayr\'fd\'fet\'fdrarak eri\'femek \'e7ok daha kolayd\'fdr.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- REST \u304?stemci Deste\u287?ini Kullanmak ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab\'ddstemci taraftaki kodu daha kolay yazmak i\'e7in ve sade REST aray\'fcz\'fcne ba\'f0l\'fd kalmak i\'e7in (DataSnap HTTP deste\'f0ine ba\'f0l\'fd kalmamak i\'e7in) Delphi XE'de bulunan DataSnap REST \'ddstemci Mod\'fcl\'fc Sihirbaz\'fdn\'fd kullanmal\'fdy\'fdz. Bu sihirbaz\'fd \'e7al\'fd\'fet\'fdrmadan \'f6nce sunucu uygulamas\'fdn\'fdn \'e7al\'fd\'fet\'fd\'f0\'fdndan ve Delphi hata ay\'fdklay\'fdc\'fds\'fd (debugger) taraf\'fdndan \'e7al\'fd\'fet\'fdr\'fdlmad\'fd\'f0\'fdndan emin olmam\'fdz gerekir. Bunun i\'e7in Delphi IDE'sinde bulunan Run Without Debugging (Hata Ay\'fdklamadan \'c7al\'fd\'fet\'fdr) se\'e7ene\'f0ini kullanabilirsiniz.\par
\tab Sihirbaz\'fd \'e7al\'fd\'fet\'fdrd\'fd\'f0\'fdn\'fdzda, ilk sayfada size sunucunun lokalde mi yoksa uzak bir makinada m\'fd (genelde lokal se\'e7ilir) ve ikinci sayfada sunucunun hangi DataSnap mimarisini temel ald\'fd\'f0\'fdn\'fd sorar. \par
\tab Bu \'f6rnek i\'e7in yukar\'fddaki resimde yapt\'fd\'f0\'fdm gibi "Stand-alone WebBroker Application" "Tek Ba\'fe\'fdna \'c7al\'fd\'fean WebBroker Uygulamas\'fd" se\'e7ene\'f0ini se\'e7melisiniz. 3. sayfada sihirbaz size sunucunun port numaras\'fdn\'fd, DataSnap i\'e7eri\'f0ini (varsay\'fdlan olarak /datasnap), ve opsiyonel olan hesap bilgisini sorar. Bitir dedi\'f0iniz zaman sihirbaz projenize otomatik olarak 2 unit dosyas\'fd daha ekler. \par
\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-200\li920 REST ba\'f0lant\'fd yap\'fdland\'fdrmalar\'fd ile, DSRestConnection bile\'feenine ev sahipli\'f0i yapan bir data mod\'fcl\'fc i\'e7eren istemci mod\'fcl unit dosyas\'fd\par
{\pntext\f5\'B7\tab}Sunucuyu \'e7a\'f0\'fdrmak i\'e7in proxy s\'fdn\'fdflar\'fd i\'e7eren bir unit dosyas\'fd. Geleneksek DataSnap ba\'f0lant\'fds\'fd i\'e7in \'fcretilen istemci s\'fdn\'fdflardan farkl\'fd olarak bu s\'fdn\'fdf, sunucuyu y\'fcr\'fctmek i\'e7in DBXConnection bile\'feeni yerine DSRestConnection bile\'feenini kullan\'fdr.\par
\pard\li720\par
\pard\tab Unutmamak gerekir ki burada proxy nesnesini elle olu\'feturman\'fdza gerek yoktur, \'e7\'fcnk\'fc sihirbaz taraf\'fdndan eklenen \'f6zel bir \'f6zellikle istemci mod\'fcl taraf\'fdndan bu nesne otomatik olarak olu\'feturulur.\par
\par
\tab // property ServerMethods1Client: TServerMethods1Client \par
\tab function TClientModule1.GetServerMethods1Client: TServerMethods1Client; \par
\tab begin \par
  \tab\tab if FServerMethods1Client = nil then \par
    \tab\tab\tab FServerMethods1Client:= TServerMethods1Client.Create( \par
      \tab\tab DSRestConnection1, FInstanceOwner); \par
  \tab\tab Result := FServerMethods1Client; \par
\tab end;\par
\par
\tab Bu demektir ki biz sunucuyu istemci mod\'fcl\'fcn \'f6zelli\'f0ini referans olarak g\'f6stererek y\'fcr\'fct\'fcebilir ve ayn\'fd \'feekilde metodu da y\'fcr\'fctebiliriz. S\'f6ylemem gereksiz olacak ama daha \'f6nce yazd\'fd\'f0\'fdm metodu direkt \'e7a\'f0\'fdrarak \'e7\'fdkan JSON sonucunu ayr\'fd\'fet\'fdrmak yerine a\'fea\'f0\'fdda yazaca\'f0\'fdm kod (bu teknoloji ile yap\'fdlan) \'e7ok daha basit olacakt\'fdr.\par
\par
\tab procedure TRestClientForm.btnProxyClick(Sender: TObject); \par
\tab begin \par
  \tab\tab edInput.Text := ClientModule1.ServerMethods1Client. \par
    \tab\tab ReverseString(edInput.Text); \par
\tab end;\par
\par
\tab\'ddki teknik de tamamen ayn\'fd sonuca ula\'fe\'fdr. Akl\'fdn\'fdda tutman\'fdz i\'e7in burada ana kavramlar, Delphi DataSnap REST Sunucusu olu\'feturmak, web uygulamas\'fd in\'fea etmek, Delphi istemcisinin bunu \'e7a\'f0\'fdrmas\'fdna eri\'feilebilir k\'fdlmak, ve her hangi bir dilde yaz\'fdlm\'fd\'fe her hangi bir istemci ile sunucuyu \'e7a\'f0\'fdrabilmenin m\'fcmk\'fcn olmas\'fdd\'fdr (Burada yap\'fdlan \'feey programlama dili farketmeksizin bir HTTP \'e7a\'f0r\'fds\'fd olu\'feturarak sonu\'e7 olarak bir JSON veri yap\'fds\'fd elde etmektir).  \par
\cf1\lang1033\f0\fs24\par
\ul\b --- Sunucu Fonksiyon Y\'fcr\'fct\'fcc\'fcs\'fc ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab DataSnap REST Uygulama sihirbaz\'fd taraf\'fdndan olu\'feturulan sunucunun daha \'f6nce tart\'fd\'femad\'fd\'f0\'fdm\'fdz tek bir \'f6zelli\'f0i kald\'fd. Bu da Sunucu Metod Y\'fcr\'fct\'fcc\'fcs\'fc olup, sunucuyu kullan\'fdlabilir bir hale getirmek i\'e7in \'e7e\'feitli fonksiyonlar\'fd test eden \'fcreysel (generic) bir mekanizmad\'fdr. Bu \'f6zellik web mod\'fcl\'fc \'fczerindeki 2. sayfa \'fcreticisi, ili\'fekili bir HTML template'i ve bir ka\'e7 JavaScript dosyas\'fd taraf\'fdndan desteklenmektedir.\par
\tab Basit\'e7e "/ServerFunctionInvoker" yolunu girerek, veya ReverseString sayfas\'fdndaki yolu takip ederek, sunucu taraf\'fdndan g\'f6sterilen s\'fdn\'fdflarla ili\'fekili 2 alan i\'e7eren bir HTML sayfas\'fd elde ederiz. Bu s\'fdn\'fdflar y\'f6netimsel s\'fdn\'fdf olan DSAdmin'e ek olarak uygulama ile ili\'fekili \'f6zel s\'fdn\'fdft\'fdr (Bu \'f6rnek i\'e7in TServerMethods1). S\'fdn\'fdf taraf\'fdndaki art\'fd i\'fearetine t\'fdklar\'fdz ve sayfa bize metodlar\'fdn listesini g\'f6sterecek \'feekilde geni\'feler. (Makalede ilgili resme bak\'fdn)\par
\tab E\'f0er burada bir metod se\'e7erseniz, sayfan\'fdn arkas\'fdndaki JavaScript kodu girdi alanlar\'fdn\'fd otomatik olarak olu\'feturur ki bu alanlar metoda girilecek olan parametre alanlar\'fdd\'fdr. Buraya bir de\'f0er girip kenardaki bir butona t\'fdklad\'fdktan sonra JSON cevab\'fdn\'fd g\'f6rebilirsiniz.\par
\tab Hedef sunucu s\'fdn\'fdfta herhangi bir g\'fcncelleme, de\'f0i\'feiklik veya geni\'feletme i\'felemi yapt\'fd\'f0\'fdn\'fdz zaman veya sunucuya yeni s\'fdn\'fdflar ekledi\'f0iniz zaman bu sayfa kendini otomatik olarak g\'fcnceller. Bu sayfa, hata ay\'fdklama ve test i\'e7in olduk\'e7a faydal\'fdd\'fdr.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Kimlik Do\u287?rulama ve Yetkilendirme ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab DataSnap REST uygulamas\'fdn\'fdn basit \'f6zelliklerini g\'f6rd\'fckten sonra sihirbaz\'fdn olu\'feturdu\'f0u kod i\'e7erisindeki (sihirbazda bu \'f6zelli\'f0i atlayabilirsiniz) \'f6zel bir \'f6zelli\'f0e g\'f6z atabiliriz. Bu da kimlik do\'f0rulama (authentication) deste\'f0idir\par
\tab Kimlik do\'f0rulama y\'f6netimi 2 par\'e7a halinde anlat\'fdlacakt\'fdr. \'ddlki oturum (session) y\'f6netimi olup ayn\'fd istemci makinadan gelen farkl\'fd (durumsuz - stateless) HTTP isteklerini nas\'fdl \'e7\'f6z\'fcld\'fc\'f0\'fcn\'fc anlat\'fdr. \'ddkincisi ise yetkilendirme y\'f6netimi olup, hangi kullan\'fdc\'fdlar\'fdn hangi sunucu metodlar\'fdn\'fd \'e7a\'f0\'fdrabilece\'f0i ile ilgili olarak bir y\'f6netimdir. Bu 3 ba\'fel\'fdk da bu ana konu i\'e7erisinde ele al\'fdnacakt\'fdr.\par
\tab Bunun i\'e7in kimlik do\'f0rulama ve yetkilendirme se\'e7eneklerini s\'e7erek yeni bir DataSnap REST uygulamas\'fd olu\'feturmakla i\'fee ba\'fel\'fdyorum. Sonu\'e7 uygulamada web mod\'fcl\'fcnde DSAuthenticationManager ad\'fdnda ek bir bile\'feen bulunacakt\'fdr. Bu da DSHTTPWebDispatcher bile\'feeninin AuthenticationManager \'f6zelli\'f0ine referans olarak kullan\'fdlacakt\'fdr.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Oturumlar ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Yetkilendirme deste\'f0ine bakmadan \'f6nce DataSnap'de oturum y\'f6netiminden bahsetmek istiyorum. En ba\'feta bir istemci sunucuyu \'e7a\'f0\'fdr\'fdr, bu yeni bir oturum ID bilgisi olu\'feturur ve bunu geleneksel bir ba\'fel\'fdk (header) ("dssession") i\'e7inde d\'f6nd\'fcr\'fcr. \'ddstemci taraf\'fdndan gelen ard arda istekler oturum ID bilgisi ile birlikte "Pragma" ba\'fel\'fd\'f0\'fd i\'e7ermeli, b\'f6ylece sunucu gelen taleplerin ayn\'fd istemciden geldi\'f0ini anlayabilmeli.\par
\tab Bir oturum zaman a\'fe\'fdm\'fdna u\'f0rad\'fd\'f0\'fd zaman (varsay\'fdlan olarak 1200 saniye yani 20 dakika) biter ve bu \'f6zel bir CloseSession URL adresi kullan\'fdlarak kapat\'fdlmaya zorlan\'fdr. E\'f0er olmayan bir oturuma bu URL ge\'e7ilmeye \'e7al\'fd\'fe\'fdl\'fdrsa (mesela bu arada sunucuyu kapat\'fdp tekrar a\'e7t\'fd\'f0\'fdn\'fdz\'fd d\'fc\'fe\'fcnelim) bir istisnai durum (exception) al\'fdrs\'fdn\'fdz ve oturum ID bilgisi s\'fdf\'fdrlan\'fdr.\par
\tab Sunucu taraf\'fdnda o anki oturuma a\'fea\'f0\'fddaki gibi ula\'feabilirsiniz.\par
\tab\par
\tab var \par
  \tab\tab session: TDSSession; \par
\tab begin \par
  \tab\tab session := TDSSessionManager.GetThreadSession; \par
\par
\tab Ayr\'fdca string de\'f0erlerini ve PutData, HasData, GetData, RemoveData metodlar\'fdn\'fd kullanarak oturum verisine isim-de\'f0er \'e7iftleri ekleyebilirsiniz.\par
\tab JavaScript istemcisi kulland\'fd\'f0\'fdn\'fdz zaman, sihirbaz\'fdn olu\'feturdu\'f0u destek kodu, global bir JavaScript de\'f0i\'fekeni ile ($$SessionID$$) oturum ID bilgisini y\'f6netir ve ayn\'fd sayfa i\'e7erisindeki her AJAX \'e7a\'f0r\'fds\'fdnda bu de\'f0er parametre olarak ge\'e7er (pass). E\'f0er sayfay\'fd de\'f0i\'fetirirseniz veya yenilerseniz oturum ID bilgisi kaybolur.\par
\tab Bununla beraber JavaScript destek kodunu, oturum ID bilgisini taray\'fdc\'fd \'e7erezlerine (cookie) eklemek, b\'f6ylece \'fczerindeki uygun sayfalarda bu bilginin mevcut olmas\'fdn\'fd sa\'f0lamak i\'e7in zorlayabilirsiniz. Bunu yapmak i\'e7in her HTML dosyas\'fdndaki onLoad() JavaScript fonksiyonuna \'feu \'e7a\'f0r\'fdy\'fd eklemeniz gerekir.\par
\par
\tab initSessionData(true); \par
\par
\tab Yapmak isteyebilece\'f0iniz ikinci bir de\'f0i\'feiklik de loginRequired de\'f0i\'fekeninin y\'f6netimini de\'f0i\'fetirmek olabilir ama bu ekstra sat\'fdr kodlar i\'e7in makaledeki kimlik do\'f0rulama b\'f6l\'fcm\'fcne bakman\'fdz gerekiyor.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Kimlik Do\u287?rulama (Authentication) ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab DSAuthenticationManager bile\'feeni OnUserAuthenticate ve OnUserAuthorize ad\'fdnda 2 adet anahtar olay i\'e7erir. \'ddlki, sunucuya kimlik do\'f0rulamas\'fd yap\'fdlmam\'fd\'fe bir kullan\'fdc\'fddan ne zaman bir istek gelse \'e7al\'fd\'fe\'fdr. Kullan\'fdc\'fd ve oturumunun kimlik do\'f0rulamas\'fd ger\'e7ekle\'fetikten sonra bu olay tetiklemesi bir daha \'e7al\'fd\'femaz. E\'f0er ger\'e7ek g\'fcvenli\'f0i aram\'fdyorsan\'fdz, bu metodu nas\'fdl yazaca\'f0\'fdn\'fdz\'fd belirtir. \'ddlgili kod a\'fea\'f0\'fddad\'fdr.\par
\par
\tab procedure TWebModule2.DSAuthenticationManager1UserAuthenticate( \par
  \tab Sender: TObject; const Protocol, Context, User, Password: string; \par
  \tab var valid: Boolean; UserRoles: TStrings); \par
\tab var \par
  \tab\tab session: TDSSession; \par
\tab begin \par
  \tab\tab valid := (user = password) and (user <> ''); \par
 \par
  \tab\tab if valid then \par
  \tab\tab begin \par
    \tab\tab\tab Session := TDSSessionManager.GetThreadSession; \par
    \tab\tab\tab Session.PutData ('username', user);\par
\par
\tab Genelde kullan\'fdc\'fdlar\'fdn ve \'feifrelerinin ge\'e7erli olup olmad\'fd\'f0\'fdn\'fd \'f6\'f0renmek i\'e7in veritaban\'fdna, yap\'fdland\'fdrma dosyas\'fdna veya i\'feletim sistemi mekanizmas\'fdna bak\'fdl\'fdr. Bu olayda, ben bo\'fe olmayan herhangi bir kullan\'fdc\'fd ad\'fd ile \'e7ak\'fd\'fean \'feifreyi kabul ediyorum. Yukar\'fddaki kodda kullan\'fdc\'fd ad\'fdn\'fd ayr\'fd bir oturum parametresi olarak ekliyorum ki, bu bilgi oturum nesnesinin kullan\'fdc\'fd ad\'fd \'f6zelli\'f0inde zaten var olan bir bilgi oldu\'f0u i\'e7in hi\'e7 de kullan\'fd\'fel\'fd bir \'feey de\'f0ildir. \par
\tab Di\'f0er taraftan GetUserName ad\'fdnda yeni bir sunucu fonksiyonu ekledim. Bu fonksiyon, oturum kullan\'fdc\'fd ad\'fdn\'fd ve daha \'f6nce olu\'feturdu\'f0um ekstra oturum parametre de\'f0erini geri d\'f6nd\'fcr\'fcyor. \'ddlgili kod a\'fea\'f0\'fddad\'fdr.\par
\par
\tab function TServerMethods1.GetUserName: string; \par
\tab var \par
  \tab\tab Session: TDSSession; \par
\tab begin \par
  \tab\tab Session := TDSSessionManager.GetThreadSession; \par
  \tab\tab Result := Session.GetData ('username') + ':' + Session.Username; \par
\tab end; \par
\par
\tab Oturum bilgisi bir yana, e\'f0er bir REST URL'sini taray\'fdc\'fd \'fczerinden direk y\'fcr\'fctmek isterseniz, standart bir HTTP ba\'felant\'fd talebi al\'fdrs\'fdn\'fdz. JavaScript kullan\'fdc\'fd aray\'fcz\'fcnde bunun yerine JavaScript'in ba\'felang\'fd\'e7 kodunda referans\'fd olan <#loginrequired> alan\'fdn\'fd kullanan ve sunucu taraf\'fdndan bilgilendirilen bir DSAuthenticationManager bile\'feeni yerle\'fetirilir.\par
\par
\tab var loginRequired; \par
\tab function onLoad() \par
\tab\{ \par
  \tab\tab loginRequired = <#loginRequired>; \par
\par
\tab\'deimdi sunucu taraf\'fdnda bu de\'f0er a\'fea\'f0\'fddaki kaynak kod taraf\'fdndan i\'felenir. \par
\par
\tab   else if SameText(TagString, 'loginrequired') then \par
    \tab\tab if DSHTTPWebDispatcher1.AuthenticationManager <> nil then \par
      \tab\tab\tab ReplaceText := 'true' \par
    \tab\tab else \par
      \tab\tab\tab ReplaceText := 'false' \par
\par
\tab LoginRequired de\'f0i\'fekeni etkinle\'fetirildi\'f0inde, taray\'fdc\'fd tabanl\'fd uygulama standart kullan\'fdc\'fd aray\'fcz\'fcn\'fc gizler ve standart HTML template'i olan bir ba\'f0lant\'fd formu g\'f6sterilir. Bu, HTML sayfas\'fdn\'fdn iki par\'e7as\'fd olan logindiv ve contentdiv par\'e7alar\'fdn\'fdn duruma g\'f6re birinin g\'f6sterilip birinin gizlenmesi ile ilgili olan ShowLogin fonksiyonunda yer al\'fdr.\par
\tab Web sunucusunun ana sayfas\'fdn\'fd ilk kez a\'e7t\'fd\'f0\'fdn\'fdzda beklenen kullan\'fdc\'fd aray\'fcz\'fc de\'f0il de bir ba\'f0lant\'fd iletisi g\'f6r\'fcrs\'fcn\'fcz (Unutmamak gerekir ki bu \'f6rnekte daha g\'fczel g\'f6r\'fcnmesi a\'e7\'fds\'fdndan basit bir CSS uygulad\'fdm) (Makalede ilgili resme bak)\par
\tab Kullan\'fdc\'fd ad\'fd ve \'feifre ile ba\'f0land\'fd\'f0\'fd zaman, standart aray\'fcz\'fc g\'f6r\'fcrs\'fcn\'fcz. \'deimdi sayfay\'fd yenilerseniz oturum bilginiz kaybolacak ve tekrar ba\'f0lanmak zorunda kalacaks\'fdn\'fdz. Daha \'f6nce de belirtti\'f0im gibi oturum y\'f6netimini \'e7erez olarak d\'fceltmek gibi bir y\'f6ntem vard\'fdr, ama gene de bir ba\'f0lant\'fd iletisi ile kar\'fe\'fdla\'fe\'fdrs\'fdn\'fdz, \'e7\'fcnk\'fc ba\'f0lant\'fd iste\'f0i, oturumun o anki durumundan \'e7ok Kimlik Do\'f0rulama Y\'f6neticisinin (Authentication Manager) varl\'fd\'f0\'fdna ba\'f0l\'fdd\'fdr. Bu da lokal oturum de\'f0erine test yapan ilk JavaScript kodunu a\'fea\'f0\'fddaki kod ile de\'f0i\'fetirerek \'e7\'f6z\'fclebilir.\par
\par
\tab var loginRequired = false; \par
 \par
\tab function onLoad() \par
\tab\{ \par
  \tab\tab initSessionData(true); \par
  \tab\tab showTime(); \par
  \tab\tab loginRequired = (getSessionID() == null);\par
\par
\tab Di\'f0er bir deyimle, ba\'f0lant\'fd i\'felemi, sadece istemci uygulaman\'fdn ge\'e7erli bir oturum ID bilgisi olmad\'fd\'f0\'fd zaman talep edilir. (getSessionID() fonksiyonu ayn\'fd zamanda oturum ID bilgisinin zaman a\'fe\'fdm\'fdna u\'f0ray\'fdp u\'f0ramad\'fd\'f0\'fdn\'fd da kontrol eder) \par
\par
\tab\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Roller ve Yetkilendirme ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Sunucu bir kere istemci uygulaman\'fdn kimlik do\'f0rulamas\'fdn\'fd yapt\'fdktan sonra, istemci uygulama, sunucu taraf\'fdndan sergilenen b\'fct\'fcn metodlar\'fd \'e7a\'f0\'fdrabilir. AuthenticationManager bile\'feeninin OnUserAuthorize olay tetikleyicisi i\'e7erisinde metodlar\'fd kullan\'fdc\'fdya ba\'f0l\'fd olarak filtreleyebilirsiniz. Bu olduk\'e7a g\'fc\'e7l\'fcd\'fcr ama can s\'fdk\'fdc\'fdd\'fdr. Unutmamak gerekir ki e\'f0er OnUserAuthorize olay tetikleyicisini kullanmay\'fd engellemeye karar verirseniz, sunucu taraf\'fdndan valid (ge\'e7erli) referans de\'f0eri True olarak atanan kod sat\'fdr\'fdn\'fd kald\'fdrman\'fdz gerekmektedir.\par
\tab Daha basit bir alternatif olarak, DataSnap mimarisinde kullan\'fdc\'fd rolleri i\'e7in haz\'fdr destek vard\'fdr. Kullan\'fdc\'fdn\'fdn kimlik do\'f0rulamas\'fdn\'fd yaparken, kullan\'fdc\'fdya bir veya daha fazla rol atayabiliriz. Bu ama\'e7la \'f6rnekteki OnUserAuthenticate olay tetikleyicisinin kodunun i\'e7ine \'feu ekstra kodu ekleriz.\par
\par
\tab if valid then \par
  \tab begin \par
    \tab\tab UserRoles.Add ('standard'); \par
    \tab\tab if user = 'admin' then \par
      \tab\tab\tab UserRoles.Add ('admin'); \par
\par
\tab Her kullan\'fdc\'fd standart role eklenir, ama idarecinin ek olarak admin rol\'fc bulunmaktad\'fdr. Bu bir string list olabilir ve her kullan\'fdc\'fdya birden \'e7ok rol eklenebilir. Ama hangi metodun kullan\'fdc\'fd rol\'fcne ba\'f0l\'fd olarak \'e7a\'f0r\'fdld\'fd\'f0\'fdn\'fd nas\'fdl bilece\'f0iz? Bu da sunucu s\'fdn\'fdfa TRoleAuth geleneksel \'f6zelli\'f0inin (custom attribute) tamam\'fdn\'fdn veya metodlar\'fdndan bir ka\'e7\'fdn\'fdn eklenmesiyle \'e7\'f6z\'fclebilir. (Geleneksel \'f6zellik, ilk kez Delphi 2010'da g\'f6sterilen bir dil \'f6zelli\'f0idir ve bununla ilgili olarak detayl\'fd bilgiyi Delphi 2010 Handbook kitab\'fdmda bulabilirsiniz.)\par
\tab\par
\tab uses \par
  \tab\tab DSAuth; \par
 \par
\tab type \par
\tab\{$METHODINFO ON\} \par
  \tab TServerMethods1 = class(TComponent) \par
  \tab\tab public \par
    \tab\tab\tab [TRoleAuth ('admin')] \par
    \tab\tab\tab function EchoString(Value: string): string; \par
    \tab\tab\tab [TRoleAuth ('standard')] \par
    \tab\tab\tab function ReverseString(Value: string): string; \par
    \tab\tab\tab [TRoleAuth ('standard')] \par
    \tab\tab\tab function GetUserName: string; \par
\par
\tab Unutmamak gerekir ki burada \'f6nemli olan nokta, e\'f0er unit dosyas\'fdn\'fdn uses k\'fdsm\'fdnda DSAuth de\'f0erini eklemezsek, derleyici geleneksel \'f6zelli\'f0i anlamaz, belirsiz bir uyar\'fd \'fcretir (Unsupported language feature: 'custom attribute') (Desteklenmeyen dil \'f6zelli\'f0i: 'Geleneksel \'f6zellik'), ve roller uygulaman\'fdz i\'e7in etkinle\'fetirilemez. Ayr\'fdca TRoleAuth \'f6zellik parametresi birbirinden virg\'fclle ayr\'fdlan rol listesi olabilir ve alternatif olarak reddedilen rollerin listesinin tan\'fdmland\'fd\'f0\'fd ikinci bir parametre de eklenebilir.\par
\tab Belirtilen \'f6zelliklerle, b\'fct\'fcn kullan\'fdc\'fdlar ReverseString ve GetUserName metodunu \'e7a\'f0\'fdrabilir ama echoString metodu sadece admin yetkisinde olan personel taraf\'fdndan \'e7a\'f0r\'fdlabilir (Yukar\'fddaki koda bak\'fdn). E\'f0er herhangi bir kullan\'fdc\'fd (admin yetkisi olmayan) EchoString metodunu \'e7a\'f0\'fdrmay\'fd denerse, sunucu istemciye JSON cevab\'fd olarak bir istisnai durum (exception) g\'f6nderir. Taray\'fdc\'fdda Sunucu Fonksiyon Y\'fcr\'fct\'fcc\'fc sayfas\'fdnda \'f6rnek bir hata g\'f6r\'fclebilmektedir. (Makalede ilgili resme bak\'fdn)\par
\cf1\lang1033\f0\fs24\par
\ul\b --- DataSnap REST Sunucusunun Veri T\'fcrleri ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab\'deimdi size oturumlar, kimlik do\'f0rulama ve yetkilendirme ile ilgili birtak\'fdm bilgiler verdi\'f0ime g\'f6re yeni bir ba\'fel\'fd\'f0a ge\'e7ebiliriz. Bu ilk demoda sunucu metodlar\'fd hep string d\'f6nd\'fcr\'fcyor. Kesinlikle daha do\'f0al t\'fcrler olan Tamsay\'fdlar, Karakterler ve Boolean t\'fcrde de\'f0erler de kullanabilirsiniz.\par
\tab Peki ya daha karma\'fe\'fdk veri t\'fcrleri? DataSnap nesne, dataset ve stream deste\'f0i sa\'f0lamas\'fdn\'fdn yan\'fd s\'fdra, JSON cevaplar\'fdn\'fd direk olarak y\'f6netme imkan\'fd verir. Ayr\'fdca bu do\'f0al yap\'fdlar\'fdn baz\'fdlar\'fdn\'fdn otomatik olarak filtreleme ve \'f6nbelle\'f0e yerle\'fetirme (cache) deste\'f0i de vard\'fdr. B\'fct\'fcn bunlar makalenin bu b\'f6l\'fcm\'fcnde ele alaca\'f0\'fdm konulard\'fdr. Bu \'f6zellikleri g\'f6sterebilmek i\'e7in sunucu s\'fdn\'fdf\'fd pek \'e7ok farkl\'fd veri t\'fcr\'fc d\'f6nd\'fcren tek ba\'fe\'fdna geni\'fe bir uygulama olu\'feturdum. \par
\tab Unutmamak gerekir ki bu b\'f6l\'fcmde sunucu taraftaki kod ve olu\'feturulan JSON veri yap\'fdlar\'fd \'fczerine yo\'f0unla\'feaca\'f0\'fdm. Ama sonraki konu olan \lang1033\f2\ldblquote jQuery and the Data Types Demo\rdblquote\lang1055\f1  "jQuery ve Veri T\'fcrleri Demosu" konusunda bu sunucudaki \'e7o\'f0u metodun nas\'fdl \'e7a\'f0r\'fdlaca\'f0\'fdn\'fd g\'f6sterecek bir HTML istemci uygulamas\'fd olu\'feturaca\'f0\'fdm. Bu gecikmenin sebebi ise, \'f6ncelikle jQuery'yi tan\'fdt\'fdp sonras\'fdnda bunu istemci taraftaki uygulama geli\'fetirmek i\'e7in kullanmak istememdir.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- S\u305?ral\u305? T\'fcrler ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab DataSnap REST sunucusu, m\'fcmk\'fcn oldu\'f0u zaman ili\'fekili JSON yap\'fdlar\'fdna e\'felenmi\'fe do\'f0al t\'fcrleri d\'f6nd\'fcr\'fcr. A\'fea\'f0\'fdda basit t\'fcrler d\'f6nd\'fcren bir tak\'fdm fonksiyonlar yer almaktad\'fdr.\par
\par
\tab public \par
    \tab\tab function AddInt (a, b: Integer): Integer; \par
    \tab\tab function AddDouble (a, b: Double): Double; \par
    \tab\tab function IsOK: Boolean; \par
    \tab\tab function GetLargeString (nCount: Integer): string; \par
\par
\tab A\'fea\'f0\'fddakiler de bu d\'f6rt metoddan d\'f6nen \'f6rnek sonu\'e7lard\'fdr (Sonuncusu, girilen karakter say\'fds\'fd parametre al\'fdnarak ve her 10 karakterden sonra bir x karakteri eklenerek bir string de\'f0er d\'f6nd\'fcrmektedir, neden b\'f6yle oldu\'f0u ilerde anlat\'fdlacakt\'fdr.)\par
\par
\tab Executed:  TServerMethods1.AddInt \par
\tab Result:    \{"a":"1","b":"2","result":3\} \par
 \par
\tab Executed:  TServerMethods1.AddDouble \par
\tab Result:    \{"a":"1.5","b":"4.4","result":5.9\} \par
 \par
\tab Executed:  TServerMethods1.IsOK \par
\tab Result:    \{"result":true\} \par
\par
\tab Executed:  TServerMethods1.GetLargeString \par
\tab Result:    \{"nCount":"20","result":"oooooooooxooooooooox"\} \par
\par
\tab\'ddlk 3 durumda sunucu, geri d\'f6nen de\'f0eri do\'f0al JSON format\'fdnda (say\'fd veya boolean gibi) d\'f6nd\'fcr\'fcp string (t\'fdrnak i\'e7ine al\'fdnm\'fd\'fe) format\'fdnda d\'f6nd\'fcrm\'fcyor. Set ve enum de\'f0erler gibi di\'f0er basit veri t\'fcrleri direkt olarak d\'f6nd\'fcr\'fclemez. Ayn\'fd \'feey tarih i\'e7in de ge\'e7erlidir. Kay\'fdt (record) gibi kullan\'fdc\'fd-tan\'fdml\'fd baz\'fd veri yap\'fdlar\'fd da y\'f6netilemez.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Nesneler ve Marshaling ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab\'c7ok \'f6nemli bir \'f6zellik, REST sunucusu i\'e7eren bir DataSnap sunucusundan bir nesne d\'f6nd\'fcrme yetene\'f0idir. Delphi 2010'da bunu TJSONMarshal (ve TJSONUnmarshal) destek s\'fdn\'fdflar\'fdn\'fd kullanarak becerebilirken, Delphi XE'de bu i\'felem otomatik olarak yer almaktad\'fdr.\par
\tab Marshaling deste\'f0i, \'f6zel alanlar i\'e7in RTTI kullan\'fdm\'fdna dayan\'fdr. Delphi geli\'fetiricileri genelde bir nesnenin verisini onun yay\'fdnlanm\'fd\'fe \'f6zelliklerinin (published properties) bulundu\'f0u set olarak d\'fc\'fe\'fcnd\'fcklerinden, bu durumda nesnenin dahili verisini hesaba katmam\'fdz gerekir. Elbette alanlar\'fdn b\'fct\'fcn veri t\'fcrlerine de\'f0inilmiyor, ya da k\'fdsmen de\'f0iniliyor. DBXJSONReflect unit dosyas\'fdn\'fdn durumundaki yorum gibi;\par
\tab "Tamsay\'fd, string, Karakter, Enum, Kesirli Say\'fd, Nesne t\'fcrleri i\'e7in otomatik olarak bir \'e7evrim ve eski haline geri d\'f6nd\'fcrme \'f6zelli\'f0i bulunmaktad\'fdr. Metod, varyant, aray\'fcz, i\'fearet\'e7i, dynArray, classRef, dizi t\'fcrleri ise alan de\'f0erleri yoksay\'fdlan ve kullan\'fdc\'fd taraf\'fdnda bir \'e7evrim gerektiren t\'fcrlerdir."\par
\tab Di\'f0er alan t\'fcrleri i\'e7in bu unit dosyas\'fdnda haz\'fdr olarak bulunan veya kendi yazaca\'f0\'fdn\'fdz kullan\'fdma haz\'fdr bir \'e7evrimi etkinle\'fetirebilirsiniz. \'c7evrimi JSONReflect \'f6zelli\'f0ini kullanarak etkinle\'fetirebilirsiniz. Bununla beraber b\'fct\'fcn se\'e7enekleri g\'f6zden ge\'e7irmek i\'e7in vaktim olmad\'fd\'f0\'fdndan (neden oldu\'f0unu sonra a\'e7\'fdklayaca\'f0\'fdm), burada bir ka\'e7 \'f6rnek verece\'f0im.\par
\tab\'d6ncelikle a\'fea\'f0\'fddaki gibi basit bir nesne yap\'fds\'fdn\'fd ele alal\'fdm\par
\par
\tab type \par
  \tab TPerson = class \par
  \tab private \par
    \tab\tab FAge: Integer; \par
    \tab\tab FLastName: string; \par
    \tab\tab FFirstName: string; \par
    \tab\tab procedure SetAge(const Value: Integer); \par
    \tab\tab procedure SetFirstName(const Value: string); \par
    \tab\tab procedure SetLastName(const Value: string); \par
  \tab public \par
\tab\tab property LastName: string read FLastName write SetLastName; \par
    \tab\tab property FirstName: string read FFirstName write SetFirstName; \par
    \tab\tab property Age: Integer read FAge write SetAge; \par
  \tab end; \par
\par
\tab Bu da nesne d\'f6nd\'fcren bir metoddur.\par
\par
\tab function TServerMethods1.GetPerson: TPerson; \par
\tab begin \par
  \tab\tab Result := TPerson.Create; \par
  \tab\tab Result.LastName := 'Smith'; \par
  \tab\tab Result.FirstName := 'Joe'; \par
  \tab\tab Result.Age := 44; \par
\tab end; \par
\par
\tab Bu da sonu\'e7 olarak g\'f6sterilen JSON veri yap\'fds\'fdd\'fdr.\par
\par
\tab Executed:  TServerMethods1.GetPerson \par
\tab Result: \{ \par
  \tab\tab "result": \{ \par
    \tab\tab\tab "type":"ServerMethodsUnit1.TPerson", \par
    \tab\tab\tab "id":1, \par
    \tab\tab\tab "fields": \{ \par
      \tab\tab\tab\tab "FAge":44, \par
      \tab\tab\tab\tab "FLastName":"Smith", \par
      \tab\tab\tab\tab "FFirstName":"Joe" \par
\tab\}\}\} \par
\par
\par
\tab\'deimdi TStringList t\'fcr\'fcnden bir nesne d\'f6nd\'fcrd\'fc\'f0\'fcm\'fcz\'fc d\'fc\'fe\'fcnelim. Alanlar\'fdn dahili setini almak i\'fee yaramaz \'e7\'fcnk\'fc ger\'e7ek datay\'fd i\'e7ermez, bir i\'fearet\'e7i taraf\'fdndan refere edilir.\par
\par
\tab function TServerMethods1.GetNames: TStringList; \par
\tab begin \par
  \tab\tab Result := TStringList.Create; \par
  \tab\tab Result.Add('one'); \par
  \tab\tab Result.Add('two'); \par
  \tab\tab Result.Add('three'); \par
\tab end; \par
\par
\tab Alaca\'f0\'fdn\'fdz kullan\'fd\'fes\'fdz JSON verisi \'feu \'feekilde olacakt\'fdr. (Kullan\'fd\'fes\'fdzd\'fdr, \'e7\'fcnk\'fc esas i\'e7erik olan stringlist i\'e7erisindeki string de\'f0erleri burada de\'f0ildir.)\par
\par
\tab Executed:  TServerMethods1.GetNames \par
\tab Result:    \{ \par
  \tab\tab "result":\{ \par
\tab\tab "type":"Classes.TStringList", \par
  \tab\tab "id":1, \par
  \tab\tab "fields":\{ \par
    \tab\tab\tab "FCount":3, \par
    \tab\tab\tab "FCapacity":4, \par
    \tab\tab\tab "FSorted":false, \par
    \tab\tab\tab "FDuplicates":"dupIgnore", \par
    \tab\tab\tab "FCaseSensitive":false, \par
    \tab\tab\tab "FOwnsObject":false, \par
    \tab\tab\tab "FEncoding":null, \par
    \tab\tab\tab "FDefaultEncoding":\{omitted\}, \par
    \tab\tab\tab "FDelimiter":"", \par
    \tab\tab\tab "FLineBreak":"", \par
    \tab\tab\tab "FQuoteChar":"", \par
    \tab\tab\tab "FNameValueSeparator":"", \par
    \tab\tab\tab "FStrictDelimiter":false, \par
    \tab\tab\tab "FUpdateCount":0, \par
    \tab\tab\tab "FWriteBOM":true \par
\tab\}\}\}\par
\par
\tab\par
\tab Farz edelim ki s\'fdn\'fdf\'fdm\'fdzda bir TStringList alan\'fd var. Daha \'f6nce kulland\'fd\'f0\'fdm\'fdz TPerson s\'fdn\'fdf\'fdnda oldu\'f0u gibi\par
\par
\tab type \par
  \tab TPersonData = class (TPerson) \par
  \tab private \par
    \tab\tab FDateOfBirth: TDate; \par
    \tab\tab FMoreData: TStringList; \par
    \tab\tab procedure SetMoreData(const Value: TStringList); \par
    \tab\tab procedure SetDateofBirth(const Value: TDate); \par
  \tab public \par
    \tab\tab constructor Create; \par
    \tab\tab destructor Destroy; override; \par
    \tab\tab property MoreData: TStringList read FMoreData write SetMoreData; \par
    \tab\tab property DateofBirth: TDate  \par
      \tab\tab read FDateofBirth write SetDateofBirth; \par
  \tab end;\par
\par
\tab Burada 2 adet problemimiz vard\'fdr. D\'f6necek de\'f0er say\'fdsal g\'f6sterim ve i\'e7indeki ger\'e7ek veri olmayan string list \'feeklinde olur ki bunu yukarda g\'f6sterdik zaten. Bunu \'e7\'f6zmek i\'e7in \'e7evrim metodlar\'fdn\'fd etkinle\'fetirmek (TStringList i\'e7in) veya yazmak gerekir (TDate i\'e7in). Daha \'f6nce de bahsetti\'f0im gibi bu Delphi XE'de JSONReflect \'f6zelli\'f0i kullanarak yap\'fdlabilmekte. Bu \'f6zellik belli say\'fdda alana ve s\'fdn\'fdrlanm\'fd\'fe d\'f6k\'fcmantasyona sahip oldu\'f0undan kullanmas\'fd kolay de\'f0ildir ama burada tekrardan derinlerine inmek istemiyorum\par
\par
\tab\'ddki \'f6zellikle s\'fdn\'fdf tan\'fdm\'fdn\'fd g\'f6rmektesiniz (A\'fea\'f0\'fdda). \'ddlk JSONReflect tarih nesnesini string t\'fcr\'fcne ServerProjectWithUserTypes demosunda (Delphi XE resmi DataSnap demolar\'fdndan bir par\'e7a) buldu\'f0um TISODateTimeInterceptor destek s\'fdn\'fdf\'fd ile e\'fele\'fetirmekte. Di\'f0er JSONReflect ise string list'i verileri ile birlikte bir nesneye e\'fele\'fetirmektedir.\par
\par
\tab type \par
  \tab TPersonData = class (TPerson) \par
  \tab private \par
    \tab\tab [JSONReflect(ctString, rtString,  \par
      \tab\tab TISODateTimeInterceptor, nil,true)] \par
    \tab\tab FDateOfBirth: TDate; \par
 \par
    \tab\tab [JSONReflect(ctTypeObject, rtTypeObject,  \par
      \tab\tab TStringListInterceptor,nil,true)] \par
    \tab\tab FMoreData: TStringList; \par
 \par
    \tab\tab procedure SetMoreData(const Value: TStringList); \par
    \tab\tab procedure SetDateofBirth(const Value: TDate); \par
  \tab public \par
    \tab\tab ... as above  \par
\par
\tab E\'f0er bu s\'fdn\'fdfta nesneyi verilerini doldurarak d\'f6nd\'fcrecek bir metod yazarsak, a\'fea\'f0\'fddaki gibi string list'teki veri ve esas string de\'f0erlerine sahip olan \'feu JSON'u elde ederiz.\par
\par
\tab Executed:  TServerMethods1.GetPersonWithData \par
\tab Result:    \{ \par
  \tab\tab "result":\{ \par
  \tab\tab "type":"ServerMethodsUnit1.TPersonData", \par
  \tab\tab "id":1, \par
  \tab\tab "fields":\{ \par
    \tab\tab\tab "FDateOfBirth":"1899-12-30 00:00:00", \par
    \tab\tab\tab "FMoreData":\{ \par
      \tab\tab\tab "type":"DBXJSONReflect.TSerStringList", \par
      \tab\tab "id":2, \par
      \tab\tab "fields":\{ \par
        \tab\tab\tab "FSerStringItemList":[ \par
          \tab\tab\tab\{"type":"DBXJSONReflect.TSerStringItem", \par
            \tab "id":3, \par
            \tab "fields":\{"FString":"Hello", "FObject":null\}\}, \par
          \tab\tab\tab\{"type":"DBXJSONReflect.TSerStringItem", \par
            \tab "id":4, \par
         \tab\tab "fields": \{"FString":"Joe","FObject":null\}\} \par
       \tab\tab ], \par
       \tab\tab "FSorted":false, \par
       \tab\tab "FDuplicates":"dupIgnore", \par
\tab\tab "FCaseSensitive":false \par
    \tab\tab\}\}, \par
    \tab\tab "FAge":44, \par
    \tab\tab "FLastName":"Smith", \par
    \tab\tab "FFirstName":"Joe" \par
\tab\}\}\}\par
\par
\tab\par
\tab Dahili veri yap\'fds\'fd basit de\'f0ildir, ama string list hakk\'fdnda baya dahili bilgileri sergiliyoruz. (potansiyel olarak ona ba\'f0lanan nesnelerle de ilgili) \'deimdi bu g\'fc\'e7l\'fc yana bak\'fdp, neden yakla\'fe\'fdm\'fdn bu taraf\'fdnda oldu\'f0umu merak ediyorsunuzdur. \'c7ok fazla ilgin\'e7 buldu\'f0um nokta, nesneden JSON'a yap\'fdlan Marshaling Delphi'den Delphiye olan ileti\'feim katmanlar\'fdnda mant\'fdkl\'fdd\'fdr. Benim odakland\'fd\'f0\'fdm nokta ise, taray\'fdc\'fdy\'fd bir istemci olarak kullanmak yerine, Delphi'nin dahili s\'fdn\'fdf isimleri ve veri yap\'fdlar\'fdna dayanan bir nesne g\'f6steriminin s\'fdn\'fdrland\'fdr\'fdlm\'fd\'fe olarak kullan\'fdlmas\'fdd\'fdr. JavaScript'in buna kesinlikle ihtiyac\'fd yoktur.\par
\tab Alternatif olarak ilerdde g\'f6rece\'f0iniz gibi, JavaScript taraf\'fdnda daha iyi ve direk y\'f6netim i\'e7in, direk TJSONObject d\'f6nd\'fcrmektir. Benim tercih etti\'f0im ve Delphi'nin belirlenmi\'fe do\'f0al deste\'f0ini bitirdikten sonra \'fczerine yo\'f0unla\'feaca\'f0\'fdm konu bu olacak.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Veri Seti ve Ak\u305?\'balar (Dataset and Streams) ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab DataSnap REST sunucusunun otomatik ele ald\'fd\'f0\'fd ilk ili\'fekili karma\'fe\'fdk veri yap\'fds\'fd datasetdir (veri seti). TDataSet bile\'feeninden t\'fcreyen herhangi bir s\'fdn\'fdf\'fd nesne olarak d\'f6nd\'fcrebilir ve tamamen JSON'a \'e7evirebilirsiniz.\par
\tab\'d6rnek olarak tamamen bir ClientDataSet d\'f6nd\'fcren a\'fea\'f0\'fddaki sunucu metoduna bakabiliriz.\par
\par
\tab function TServerMethods1.GetCustomers: TDataSet; \par
\tab begin \par
  \tab\tab ClientDataSet1.Open; \par
  \tab\tab ClientDataSet1.MergeChangeLog; // clean up, just in case \par
  \tab\tab Result := ClientDataSet1; \par
\tab end; \par
\par
\tab Bile\'feenin basit bir yap\'fdland\'fdrmas\'fd vard\'fdr, veriyi program\'fdn oldu\'f0u dizinle ayn\'fd bir dosya i\'e7erisine y\'fcklemek gibi.\par
\par
\tab object ClientDataSet1: TClientDataSet \par
  \tab\tab FileName = 'customer.cds' \par
\tab End \par
\par
\tab Sonu\'e7 JSON'dan a\'fea\'f0\'fddaki al\'fdnt\'fdda, Delphi data ve metadata'y\'fd ay\'fdrarak d\'f6nd\'fcrecek ve veriyi kolonlara g\'f6re s\'fdralayacakt\'fdr. (Biraz kullan\'fd\'fes\'fdz buldu\'f0um bir\'feey)\par
\par
\tab Executed:  TServerMethods1.GetCustomers \par
\tab Result:    \{"result": \par
  \tab\tab\{"table":[ \par
    \tab\tab\tab ["CustNo",7,0,0,0,8,0,0,false,false,0,false,false], \par
    \tab\tab\tab ["Company",1,1,0,30,31,0,0,false,false,0,false,false], \par
    \tab\tab\tab ["Addr1",1,2,0,30,31,0,0,false,false,0,false,false]...], \par
  \tab\tab "CustNo":[1221,1231,1351,1354,...], \par
  \tab\tab "Company":["Kauai Dive Shoppe","Unisco", \par
    \tab\tab "Sight Diver Webinarist","Cayman Divers World Unlimited",...], \par
  \tab\tab "Addr1":["4-976 Sugarloaf Hwy","PO Box Z-547","1 Neptune Lane", \par
    \tab\tab "PO Box 541",...], \par
  \tab ...\}\} \par
\par
\tab Tablo (table) dizisi, alan tan\'fdmlamalar\'fdna, son derece okunabilir olmasa da t\'fcr ve di\'f0er ayarlamalara sahiptir, takip eden alanlar da kolonlar\'fd, her biri tamamen bir de\'f0er seti ile temsil eder. G\'f6rebilece\'f0iniz gibi belli kolon de\'f0erleri aras\'fdndaki, belirli bir kay\'fdt say\'fds\'fd ile ba\'felayan, k\'fdsaca s\'fdn\'fdrl\'fd bir dataset d\'f6nd\'fcrmek de m\'fcmk\'fcnd\'fcr. Bu uzant\'fdya filtreleme ile ilgili konuda detayl\'fd olarak bakaca\'f0\'fdz.\par
\tab DataSnap REST Sunucusu taraf\'fdndan do\'f0al olarak y\'f6netilen ikinci bir Delphi s\'fdn\'fdf\'fd TStreamdir (ve bundan t\'fcreyen s\'fdn\'fdflar). A\'fea\'f0\'fddaki sunucu metodu inceleyelim.\par
\par
\tab function TServerMethods1.GetImage: TStream; \par
\tab var \par
  \tab\tab fStream: TFileStream; \par
\tab begin \par
  \tab\tab fStream := TFileStream.Create('images\\expand.png', fmOpenRead); \par
  \tab\tab Result := fStream; \par
\tab end; \par
\par
\tab E\'f0er Sunucu Fonksiyon Y\'fcr\'fct\'fcc\'fcs\'fc istemcisini kullan\'fdcrsak, a\'fea\'f0\'fddaki gibi bir sonu\'e7 elde ederiz. (Bu sonucun ilk par\'e7as\'fdd\'fdr)\par
\par
\tab Executed:  TServerMethods1.GetImage \par
\tab Result:    "\lang1033\f2\'89PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\... \par
\par
\lang1055\f1\tab G\'f6rd\'fc\'f0\'fcn\'fcz gibi bu JSON de\'f0ildir. \'ddkili bir ak\'fd\'fe d\'f6nd\'fcrd\'fc\'f0\'fcn\'fczde (binary stream) ger\'e7ekte, verinin ger\'e7ek halini almak istersiniz, text g\'f6sterimini de\'f0il. {\field{\*\fldinst{HYPERLINK "http://localhost:8080/datasnap/rest/TServerMethods1/getimage"}}{\fldrslt{\ul\cf2 http://localhost:8080/datasnap/rest/TServerMethods1/getimage}}}\f1\fs20  URL adresini \'ddnternet Explorer \'fczerinde a\'e7arsan\'fdz, a\'fea\'f0\'fddaki resimde g\'f6sterildi\'f0i gibi resimi g\'f6r\'fcrs\'fcn\'fcz (Makalede ilgili resme bak\'fdn). Ama Google Chrome gibi di\'f0er taray\'fdc\'fdlar bunu sunamaz \'e7\'fcnk\'fc HTTP cevab\'fdnda uygun Content-Type Header (\'dd\'e7erik T\'fcr\'fc Ba\'fel\'fd\'f0\'fd) eksikli\'f0i vard\'fdr.\par
\tab Bununla beraber ak\'fd\'felar (stream) i\'e7in URL adresine "json_true" \'f6zel de\'f0erini yazarak JSON t\'fcr\'fcne \'e7evirmesini sa\'f0layabiliriz. E\'f0er a\'fea\'f0\'fddaki URL adresini kullan\'fdrsan\'fdz, onun alt\'fdndaki cevaba ula\'fe\'fdrs\'fdn\'fdz.\par
\par
\tab{\field{\*\fldinst{HYPERLINK "http://localhost:8080/datasnap/rest/TServerMethods1/getimage?json=true"}}{\fldrslt{\ul\cf2 http://localhost:8080/datasnap/rest/TServerMethods1/getimage?json=true}}}\f1\fs20  \par
\par
\tab\{"result":[[137,80,78,71,13,10,26,10,0,0,0,...]]\} \par
\par
\tab Unutmamak gerekir ki, e\'f0er fonksiyon \'e7a\'f0r\'fds\'fdnda herhangi ba\'feka bir var parametresi (de\'f0i\'feken yani) yoksa, d\'f6nen sonucu sadece ikili (binary) format olarak destekler\par
\cf1\lang1033\f0\fs24\par
\ul\b --- JSON'u Direk D\'f6nd\'fcrmek ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab DataSnap REST taraf\'fdndan direk destek verilen bir di\'f0er veri t\'fcr\'fc de TJSONValue t\'fcr\'fc ve TJSONObject ve TJSONArray gibi alt s\'fdn\'fdflar\'fdd\'fdr. Daha \'f6nce de belirtti\'f0im gibi e\'f0er amac\'fdn\'fdz istemci taraftaki uygulamay\'fd JavaScript ile yazmaksa, bu durum olduk\'e7a ilgin\'e7 bir durumdur. Mesela bir nesnenin datas\'fdn\'fd, onunla ili\'fekili oldu\'f0u JSON nesnesini olu\'feturarak d\'f6nd\'fcrebiliriz.\par
\par
\tab function TServerMethods1.GetPersonJson: TJSONObject; \par
\tab begin \par
  \tab\tab Result := TJSONObject.Create; \par
  \tab\tab Result.AddPair ('LastName', 'Smith'); \par
  \tab\tab Result.AddPair ('FirstName', 'Joe'); \par
  \tab\tab Result.AddPair ('Age', TJsonNumber.Create (44)); \par
\tab end; \par
\par
\tab Bu iste\'f0e gelecek cevap, JavaScript istemcisinden \'e7ok daha kolay bir \'feekilde ele al\'fdnacak d\'fcz JSON veri yap\'fds\'fdd\'fdr.\par
\par
\tab Executed:  TServerMethods1.GetPersonJson \par
\tab Result:    \{"result": \{ \par
             \tab "LastName":"Smith", \par
             \tab "FirstName":"Joe", \par
             \tab "Age":44\}\}  \par
\par
\tab Benzer bir \'feekilde elimizde olan bir isim listesini (daha \'f6nce ele ald\'fd\'f0\'fdm\'fdz StringList), \'f6zellikle istemci taraf\'fdndaki i\'felemde, JSON dizisini direk olarak kullanarak yapabiliriz. \'deu anda sunucu metoduna bakal\'fdm.\par
\par
\tab function TServerMethods1.GetNamesJson: TJSONArray; \par
\tab begin \par
  \tab\tab Result := TJSONArray.Create; \par
  \tab\tab Result.Add('one'); \par
  \tab\tab Result.Add('two'); \par
  \tab\tab Result.Add('three'); \par
\tab end; \par
\par
\tab Tekrar bakt\'fd\'f0\'fdm\'fdzda, JSON sonucu \'e7ok daha basittir. TStringList \'f6zelli\'f0i ile kar\'fe\'fdla\'fet\'fdrarak (daha \'f6nceki konudaki \'e7\'fdkt\'fdya bak\'fdn) aradaki fark\'fd a\'e7\'fdk\'e7a g\'f6rebilirsiniz. \par
\par
\tab Executed:  TServerMethods1.GetNamesJson \par
\tab Result:    \{"result":["one","two","three"]\} \par
\par
\tab Bu \'f6rnekte sunucunun d\'f6nd\'fcrebildi\'f0i veri yap\'fdlar\'fdna odakland\'fdk. \'ddlerleyen demolarda b\'fct\'fcn resmi g\'f6rebilmeniz i\'e7in ayn\'fd JSON sonu\'e7lar\'fdn\'fd kullanacak komple bir istemci yazaca\'f0\'fdm.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Filtreleme ve \'d6n Belle\u287?e Alma (Filtering and Caching) ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab JavaScript istemcisindeki \'f6rneklere yo\'f0unla\'femadan \'f6nce, Delphi XE'deki DataSnap'te tan\'fdt\'fdlan REST deste\'f0i ile alakal\'fd olarak 2 \'f6zellikten bahsetmem gerekiyor, ama bunlar\'fdn derinine fazla inmeyece\'f0im. \par
\tab\'ddlki, sonucu (dataset veya sitring gibi) \'f6zel bir filtreleme s\'f6zdizimi kullanarak direk \'e7a\'f0\'fdrarak (URL kullanarak) veya JavaScript proxy \'e7a\'f0r\'fdlar\'fdnda arg\'fcman dizisine gerekli de\'f0erleri sa\'f0layarak filtrelemektir.\par
\tab\'ddki filtremiz, substring (ss) ve table'd\'fdr (t) ve ikisi de count (c), range (r) ve offset(o) olmak \'fczere 3 adet i\'feletmeye sahiptir. Bu b\'fct\'fcn elemanlar, URL adresine sunucu fonksiyonunun yolu ve fonksiyon parametrelerinden sonra (yolda belirtilen (URL'de)) parametre olarak eklenir.\par
\tab Bu \'f6rnekte, 100 karaktere sahip olan bir string'den 20 karakteri \'e7ekece\'f0iz (sunucu daha \'f6nceki \'f6rnekle ayn\'fd) veya ilk 85 karakteri atlayaca\'f0\'fdz. Burada 2 URL adresi ve \'e7\'fdkan JSON sonu\'e7lar\'fd yer almaktad\'fdr.\par
\par
\tab /datasnap/rest/TServerMethods1/getlargestring/100?ss.c=20 \par
\tab\{"result":["oooooooooxooooooooox"]\} \par
\par
\tab /datasnap/rest/TServerMethods1/getlargestring/100?ss.o=85 \par
\tab\{"result":["ooooxooooooooox"]\} \par
\par
\tab Range (s\'fdralama) filtresi, offset (ba\'felang\'fd\'e7 noktas\'fdna olan uzakl\'fdk) ve count (say\'fd) olmak \'fczere 2 adet parametre al\'fdr. Mesela bir tablonun sadece 3. kayd\'fdn\'fd almak i\'e7in "t,r=2,1" filtresini kullan\'fdr\'fdz, 2 olmas\'fdn\'fdn sebebi tablonun ilk kayd\'fd 0 olarak g\'f6rmesidir.\par
\par
\tab /datasnap/rest/TServerMethods1/GetCustomers?t.r=2,1 \par
\tab\{"result":[\{"table":[..],"CustNo":[1351],"Company":["Sight Diver \par
\tab Webinarist"],"Addr1":["1 Neptune Lane"],"Addr2":[null],"City":["Kato \par
\tab Paphos"],"State":[null],"Zip":[null],"Country":["Cyprus"],"Phone":["357-\par
\tab 6-876708"],"FAX":["357-6-870943"],"TaxRate":[0],"Contact":["Phyllis \par
\tab Spooner"],"LastInvoiceDate":["1994-10-18 19:20:30.0"]\}]\} \par
\par
\tab Her istek i\'e7in bir par\'e7a veri, HTML istemcisinden gelen b\'fcy\'fck bir dataset i\'e7erisinde numaraland\'fdrmay\'fd kolayla\'fet\'fdr\'fdr, mesela d\'f6necek de\'f0er i\'e7in her defas\'fdnda 20 kay\'fdt getir ve gelen kay\'fdtlar i\'e7in \'e7oklu sayfalar olu\'fetur gibi.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Veriyi \'d6n Belle\u287?e Alma (Caching Data) ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab  Bir ak\'fd\'fe (stream) veya karma\'fe\'fdk bir veri yap\'fds\'fd d\'f6nd\'fcrd\'fc\'f0\'fcm\'fczde, JSON g\'f6sterimindense t\'fcm ikili veriyi (binary data) d\'f6nd\'fcrmek daha iyidir. Ama ayr\'fdca di\'f0er veri yap\'fdlar\'fdn\'fd d\'f6nd\'fcrmek veya tek bir \'e7a\'f0r\'fdda farkl\'fd iki ak\'fd\'fe d\'f6nd\'fcrmek i\'e7in neye ihtiyac\'fdm\'fdz var?\par
\tab Bu nokta, DataSnap REST \'f6n belle\'f0e alma (caching) deste\'f0inin ne kadar faydal\'fd oldu\'f0unu g\'f6rd\'fc\'f0\'fcm\'fcz noktad\'fdr. Her zaman \'e7oklu veri t\'fcr\'fc d\'f6nd\'fcren (var veya out parametrelerini kullanarak) bir metodunuz olabilir, ve veriyi JSON sonucu yerine belirlenmi\'fe bir formatta isteyebilirsiniz.\par
\tab Sunucu tarafta \'fe\'f6yle bir metodumuz oldu\'f0unu d\'fc\'fe\'fcnelim. (RestXEDataTypes demosunda daha \'f6nce i\'felendi)\par
\par
\tab function TServerMethods1.ImageAvailable(const strImageName: string; \par
  \tab out aStream: TStream): Boolean; \par
\tab begin \par
  \tab\tab Result := False; \par
  \tab\tab if strImageName = 'expand.png' then \par
  \tab\tab begin \par
    \tab\tab\tab aStream := TFileStream.Create('images\\expand.png', fmOpenRead); \par
    \tab\tab\tab Result := True; \par
  \tab\tab end; \par
\tab end; \par
\par
\tab E\'f0er standart bir \'e7a\'f0r\'fdda bulunursan\'fdz, alaca\'f0\'fdn\'fdz \'feey ak\'fd\'fea ek olarak verinin JSON g\'f6sterimi olacakt\'fdr. (Unutmamak gerekir ki, bir ak\'fd\'fe d\'f6nd\'fcrd\'fc\'f0\'fcn\'fcz zaman gelece\'f0i format ikili formatt\'fdr ama opsiyonel olarak JSON format\'fdnda talep edebilirsiniz.) Bu olayda ayr\'fdca HTTP talebinin Accept (kabul etme) ba\'fel\'fd\'f0\'fdnda (header) application/rest format\'fdnda karar k\'fdlabilirsiniz. E\'f0er \'e7a\'f0r\'fd i\'e7in JavaScript kullan\'fdyorsan\'fdz proxy kullanmak yerine \'e7ekirdek ServerFunctionExecutor nesnesine direk \'e7a\'f0r\'fd yapmak zorundas\'fdn\'fdz.\par
\tab Burada \'e7a\'f0r\'fd ile ilgili JavaScript kod par\'e7as\'fd bulunmaktad\'fdr.\par
\par
\tab function onReverseStringClick() \par
\tab\{ \par
  \tab\tab var valueField = document.getElementById('valueField'); \par
  \tab\tab var methExec = new ServerFunctionExecutor("TServerMethods1"); \par
 \par
  \tab\tab var resultObj = methExec.executeMethod("ImageAvailable", "GET",  \par
    \tab\tab [valueField.value], null, true, null, "application/rest"); \par
  \tab\tab document.getElementById('image1').src =  \par
    \tab\tab methExec.getCacheURL(resultObj.result[0],true); \par
\tab\} \par
\par
\tab ServerFunctionExecutor nesnesinin ExecuteMethod fonksiyonuna ge\'e7ti\'f0imiz parametreler; metod ad\'fd, istek t\'fcr\'fc, parametreler, geri \'e7a\'f0\'fdrma (callback), e\'f0er sonu\'e7 varsa talep edilen filtreler ve kabul etme format\'fdd\'fdr. Bu \'e7a\'f0r\'fd yap\'fdld\'fd\'f0\'fd zaman a\'fea\'f0\'fddaki JSON cevab\'fd d\'f6necektir.\par
\par
\tab\{"result":["0\\/0\\/0",true],"cacheId":0,"cmdIndex":0\} \par
\par
\tab Burada yukar\'fddaki son JavaScript sat\'fdr\'fdnda da g\'f6rd\'fc\'f0\'fcm\'fcz gibi , URL'yi kullanarak ve bir GET talebinde bulunarak cache i\'felemini yapabiliriz, bu URL de \'feunun gibi bir \'feey olur.\par
\par
\tab{\field{\*\fldinst{HYPERLINK "http://localhost:8080/datasnap/cache/0/0/0?sid="}}{\fldrslt{\ul\cf2 http://localhost:8080/datasnap/cache/0/0/0?sid=}}}\f1\fs20 <...> \par
\par
\tab Bu, ak\'fd\'fe\'fdn ikili verisini, sunucu metodunu tekrar \'e7al\'fd\'fet\'fdrmadan ama daha \'f6nce olu\'feturulmu\'fe nesneyi (\'f6n bellekte saklanan nesneyi) d\'f6nd\'fcrecektir. Bu y\'fczden tekrardan belirtiyorum ki, yukar\'fddaki son JavaScript sat\'fdr\'fdnda bir sayfadaki resim eleman\'fdn\'fdn \'f6n belle\'f0e saklanm\'fd\'fe ak\'fd\'fe\'fdn\'fd, URL adresine atayabiliriz. Ve b\'f6ylece a\'fea\'f0\'fddaki gibi resmi g\'f6rebiliriz. (Makalede ilgili resme bak\'fdn)\par
\par
\tab  \par
\cf1\lang1033\f0\fs24\par
\ul\b --- jQuery Kullanma ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Delphi'nin DataSnap REST sunucular\'fd, \'e7o\'f0unlu\'f0u sunucuyu kendi ba\'felar\'fdna \'e7a\'f0\'fdrmak i\'e7in tahsis edilen, bir dizi JavaScript destek dosyas\'fdna sahiptir. DOM hilesi'ne ili\'fekin olarak (Taray\'fdc\'fd i\'e7erisindeki HTML sayfalar\'fdna dinamik de\'f0i\'feiklikler yapabilirsiniz.) sade eski JavaScripti kullanacaks\'fdn\'fdz. Bu dile dayal\'fd olarak taray\'fdc\'fd tabanl\'fd uygulamalar\'fd geli\'fetirmeyi kolayla\'fet\'fdrmak i\'e7in \'e7e\'feitli JavaScript kl\'fct\'fcphaneleri bulunmaktad\'fdr. En \'e7ok bilinenlerinden ve g\'fcn\'fcm\'fczde en s\'fdk kullan\'fdlanlar\'fdndan biri (Google ve Microsoft gibi firmalar da kullan\'fdyor) jQuery'dir. Bu ger\'e7ekten g\'fc\'e7l\'fc ve a\'e7\'fdk kaynak kodlu bir JavaScript k\'fct\'fcphanesi olup {\field{\*\fldinst{HYPERLINK "http://jquery.com"}}{\fldrslt{\ul\cf2 http://jquery.com}}}\f1\fs20  adresinde bulunur.\par
\tab jQuery i\'e7erisine derinleme girmek ve alternatifleri dururken neden bunu tercih etti\'f0imi anlatmak i\'e7in yeterli zaman\'fdm yok. Ama jQuery'yi Delphi kodlar\'fd ile birle\'fetirerek, Delphi DataSnap REST Sihirbaz\'fd taraf\'fdndan olu\'feturulan standart HTML sayfas\'fdn\'fd nas\'fdl geli\'fetirece\'f0imizi k\'fdsa bir \'feekilde anlataca\'f0\'fdm. (E\'f0er Delphi 2010 Handbook kitab\'fdm\'fd temel alarak yazd\'fd\'f0\'fdm ge\'e7en seneki makaleme bakarsan\'fdz, orada jQuery'yi tek ba\'fe\'fdna kulland\'fd\'f0\'fdm\'fd, \'e7\'fcnk\'fc Delphi 2010'un herhangi bir JavaScript istemci deste\'f0i olmad\'fd\'f0\'fdn\'fd g\'f6receksiniz.)\par
\tab jQuery'nin nas\'fdl \'e7al\'fd\'fet\'fd\'f0\'fd ile ilgili olarak bir ka\'e7 anahtar kavram bulunmaktad\'fdr. \'ddlki, jQuery bir nesnedir ve bunu var olan bir JavaScript nesnesine veya DOM eleman\'fdna sarabiliriz (s\'fcr\'fckle b\'fdrak gibi d\'fc\'fe\'fcnelim) (metodlar\'fd ile birlikte). Bunu yapmak i\'e7in, jQuery fonksiyonunu bir nesneye direkt olarak veya bir ay\'fdr\'fdc\'fd (bir veya birden \'e7ok nesneyi ID, s\'fdn\'fdf, tag bilgisine g\'f6re \'e7ekmek i\'e7in kural) ile ge\'e7erek kullanmak gerekiyor. \par
\tab Mesela verilen bir web sayfas\'fdnda s\'fdras\'fdyla sayfadaki b\'fct\'fcn hyperlink'leri gizleyebilirsiniz, verilen bir s\'fdn\'fdftaki b\'fct\'fcn elemanlar\'fd g\'f6sterebilirsiniz ve verilen ID bilgisi'nin ait oldu\'f0u eleman\'fdn g\'f6r\'fcn\'fcrl\'fc\'f0\'fcn\'fc d\'fczenleyebilirsiniz. Bunu a\'fea\'f0\'fddaki 3 sat\'fdrla yapabilirsiniz.\par
\par
\tab $("a").hide() \par
\tab $(".myclass").show() \par
\tab $("#theid").toggle() \par
\par
\tab jQuery'deki bir di\'f0er anahtar kavram ise JavaScripti ba\'f0layarak HTML elemanlar\'fdna herhangi bir davran\'fd\'fe ekleyemezsiniz. (Bu, kodun okunmas\'fdn\'fd ve bir web taras\'fdmc\'fds\'fd taraf\'fdndan de\'f0i\'fetirilmesini olduk\'e7a zorla\'fet\'fdr\'fdr.)\par
\cf1\lang1033\f0\fs24\par
\ul\b --- jQuery'yi Sihirbaz\u305?n HTML \'baablonuna (Template) Ekleme ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Biliyorum bu \'e7ok k\'fdsa bir tan\'fdmlama oldu, ama iyi bir giri\'fein gerektirdi\'f0i bir ka\'e7 d\'fczine sayfay\'fd yazamam \'feu anda. \'deimdilik bunu yerine, Sihirbaz taraf\'fdndan olu\'feturulan kodu nas\'fdl alaca\'f0\'fdm\'fdza ve jQuery'yi proje i\'e7erisine g\'f6merek bu kodu nas\'fdl geli\'fetirece\'f0imize odaklanal\'fdm (Bu RestXeOneJQuery demo projesinde g\'f6steriliyor.)\par
\tab B\'fct\'fcn de\'f0i\'feikliklerimiz, ilk \'f6rnekte, ReverseString.html \'feablonunda (template) olacak. \'d6ncelikle kodumuza, jQuery'yi eklemek i\'e7in bir sat\'fdrl\'fdk bir kod ekliyoruz. (bunu jQuery.js dosyas\'fdn\'fd projemiz i\'e7indeki js dizinine ekledikten sonra yap\'fdyoruz.)\par
\tab\par
\tab <script type="text/javascript" src="js/jquery.js"></script> \par
\par
\tab Alternatif olarak, jQuery'nin bulundu\'f0u public bir adres bilgisini de referans olarak g\'f6sterebiliriz, ama bu biraz tehlikelidir \'e7\'fcnk\'fc k\'fct\'fcphanede baz\'fd \'feeyler de\'f0i\'feebilir ve bu da kodun \'e7al\'fd\'femas\'fdn\'fdn durmas\'fdna sebep olabilir. Sonra onReverseStringClick fonksiyonundaki koda odaklan\'fdyoruz. Orjinal hali \'feu \'feekildeydi.\par
\par
\tab function onReverseStringClick() \par
\tab\{ \par
  \tab\tab var valueField = document.getElementById('valueField'); \par
  \tab\tab var s = serverMethods().ReverseString(valueField.value); \par
  \tab\tab valueField.value = s.result; \par
\tab\}\par
\par
\tab jQuery'yi getElementById s\'fdn\'fdf\'fd ile yer de\'f0i\'fetirmek ve elemanlar\'fdn de\'f0erine eri\'femek i\'e7in val() fonksiyonunu kullanmak amac\'fdyla kullanabiliriz.\par
\par
\tab function onReverseStringClick() \par
\tab\{ \par
  \tab\tab var valueField = $('#valueField'); \par
  \tab\tab var s = serverMethods().ReverseString(valueField.val()); \par
\tab\tab   valueField.val (s.result); \par
\tab\} \par
\par
\tab\'ddkinci bir de\'f0i\'feiklik de metodu HTML'e direkt olarak ba\'f0lamakt\'fdr.\par
\par
\tab <table> \par
  \tab\tab <tr> \par
    \tab\tab\tab <td><input id="valueField" type="text" value="A B C" /></td> \par
    \tab\tab\tab <td><button onclick='javascript:onReverseStringClick();'> \par
      \tab\tab\tab\tab ReverseString</button></td> \par
  \tab\tab </tr> \par
\tab </table> \par
\par
\tab jQuery kullanarak onclick \'f6zelli\'f0ini kald\'fdr\'fdp bir belirleyici ekleyebiliriz.\par
\par
\tab <td><button id="reverseButton">ReverseString</button></td> \par
\par
\tab Art\'fdk HTML'in koda herhangi bir referans\'fd yoktur. Bu \'e7ok \'f6nemlidir \'e7\'fcnk\'fc, k\'fds\'fdtl\'fd uygulama kodu ve ihtiya\'e7 bilgisi dahilinde HTML, bir web tasar\'fdmc\'fds\'fd taraf\'fdndan gelenekselle\'fetirmeye daha uygun hale gelir.\par
\tab jQuery kullanarak yap\'fdlan yakla\'fe\'fdm, alttaki ba\'felang\'fd\'e7 fonksiyonunu kullanarak kod (HTML sayfas\'fdndan ayr\'fd bir sayfa olabilir) i\'e7erisindeki DOM elemanlar\'fd ile 2 olay tetikleyicisini birle\'fetirir.\par
\par
\tab $(document).ready(function() \{ \par
  \tab\tab $('#reverseButton').click (function ()\{ \par
    \tab\tab\tab onReverseStringClick(); \par
  \tab\tab\}); \par
\tab\}); \par
\par
\tab Dok\'fcman olarak \'e7al\'fd\'fet\'fdr\'fdlan bu kod (HTML sayfas\'fd) haz\'fdr hale gelir ve anonim bir metodu kullanarak verilen eleman\'fdn clikc olay\'fd i\'e7in bir tetikleyici fonksiyon kurar. (onReverseStringClick olarak d\'f6ner)\par
\cf1\lang1033\f0\fs24\par
\ul\b --- jQuery ve Veri T\'fcrleri Demosu ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Art\'fdk Delphi DataSnap REST Sihibaz\'fd taraf\'fdndan otomatik olu\'feturulan HTML \'feablonuna jQuery'yi nas\'fdl g\'f6md\'fc\'f0\'fcm\'fcz\'fc g\'f6rd\'fc\'f0\'fcm\'fcze g\'f6re bu k\'fct\'fcphaneyi ger\'e7ek hayatta kar\'fe\'fdla\'feabilece\'f0imiz durumlarda kullanmaya bakabiliriz. "DataSnap REST Sunucusundaki Veri T\'fcrleri" konusunda olu\'feturdu\'f0umuz, \'e7e\'feitli metodlar\'fdn mevcut oldu\'f0u ServerProjectWithUserTypes demo projesi i\'e7in bir istemci olu\'feturdum (JavaScript kodu ile bir HTML sayfas\'fd).\par
\tab Bu yeni kullan\'fdc\'fd aray\'fcz\'fcn\'fc desteklemesi i\'e7in, projenin web mod\'fcl\'fcne yeni bir hareket ekledim (/jclient) ve JClient.html ad\'fdndaki yeni HTML \'feablonuna ba\'f0lanacak ili\'fekili bir Page Producer (sayfa \'fcretici) bile\'feeni ekledim. Sayfan\'fdn ilk par\'e7as\'fd a\'fea\'f0\'fdda g\'f6r\'fcnmektedir. (Hatta baz\'fd taleplerin cevaplar\'fd ile birlikte) (Makalede ilgili resme bak\'fdn)\par
\tab HTML sayfas\'fd \'e7e\'feitli metodlar i\'e7in bir ka\'e7 sayfadan olu\'fesa bile, ben belirlenmi\'fe bir yap\'fdy\'fd benimsedim. Her formu metoddan sonra bir div ile isimlendirerek ve form elemanlar\'fdna birle\'femi\'fe id bilgilerini referans olarak g\'f6stererek \'e7evreledim. \'d6rnek olarak AddInt i\'felemi ile ilgili formun kodu a\'fea\'f0\'fddad\'fdr.\par
\par
\tab <h3>function AddInt (a, b: Integer): Integer</h3> \par
\tab <div id="AddInt"> \par
  \tab\tab <table> \par
    \tab\tab\tab <tr> \par
      \tab\tab\tab\tab <td><label>a:</label>  \par
        \tab\tab\tab\tab\tab <input id="a" type="text" value="10" /></td> \par
      \tab\tab\tab\tab <td><label>b:</label>  \par
        \tab\tab\tab\tab\tab <input id="b" type="text" value="32" /></td> \par
      \tab\tab\tab\tab <td><label>result: </label>  \par
        \tab\tab\tab\tab\tab <input id="result" type="text" value="" /></td> \par
      \tab\tab\tab\tab <td><button id="button">AddInt</button></td> \par
    \tab\tab\tab </tr> \par
  \tab\tab </table> \par
\tab </div> \par
\par
\tab Sayfa ba\'felang\'fd\'e7 kodu ($(document).ready), \'e7e\'feitli girdi kontrollerini referans olarak g\'f6stermek i\'e7in, buton \'fczerinde bir olay tetikleyici kurar.\par
\par
\tab $('#AddInt #button').click (function ()\{ \par
  \tab\tab res = serverMethods().AddInt( \par
    \tab\tab\tab $('#AddInt #a').val(), \par
    \tab\tab\tab $('#AddInt #b').val()); \par
  \tab\tab $('#AddInt #result').val (res.result); \par
\tab\});\par
\par
\tab B\'fct\'fcn formlar ve metodlar i\'e7in ayn\'fd yakla\'fe\'fdm kullan\'fdlacakt\'fdr, AddDouble ve GetLargeString formlar\'fdnda oldu\'f0u gibi ili\'fekili kodlarda bunlardan baz\'fdlar\'fdna g\'f6z atabilirsiniz. IsOK fonksiyonunun formu parametre almad\'fd\'f0\'fdndan ve fonksiyondan d\'f6nen de\'f0er text'in rengini de\'f0i\'fetirmek i\'e7in kullan\'fdld\'fd\'f0\'fdndan di\'f0erlerine g\'f6re biraz daha farkl\'fdd\'fdr.\par
\par
\tab $('#IsOK #button').click (function ()\{ \par
  \tab\tab res = serverMethods().IsOK (); \par
  \tab\tab if (res.result) \par
  \tab\tab\{ \par
    \tab\tab\tab $('#IsOK #result').val ('ok'); \par
    \tab\tab\tab $('#IsOK #result').attr('style', 'color: green;'); \par
  \tab\tab\}; \par
\tab\}); \par
\par
\tab GetLargeString fonksiyonunu test etmek i\'e7in, sunucuya sonu\'e7 olarak gelecek JSON'u filtrelemek i\'e7in (mesela sadece ilk 20 karakteri alacak) bir ka\'e7 buton ekledim. \'ddhtiyac\'fdm\'fdz olan, ekstra bir HTTP alan\'fdn\'fd ge\'e7mek, ServerFunctionExecuter nesnesini kullanarak d\'fc\'fe\'fck seviyede direkt bir \'e7a\'f0r\'fdda bulunmak ve HTTP alanlar\'fdn\'fd bir JSON nesnesi i\'e7erisinde 2. parametre olarak g\'f6ndermektir.\par
\par
\tab $('#GetLargeString #button2').click (function ()\{ \par
  \tab\tab var methExec = serverMethods().executor; \par
  \tab\tab res = methExec.executeMethod("GetLargeString", "GET", [100],  \par
    \tab\tab null, true, \{"ss.c": "20"\}, null); \par
  \tab\tab $('#GetLargeString #result').val (res.result); \par
\tab\}); \par
\par
\tab Server taraf\'fdndan mashallanan bir nesneye eri\'femek olduk\'e7a basittir, sadece fields olarak tan\'fdmlanan alana, ekstradan bir eleman\'fd referans olarak g\'f6ndermek yeterlidir.\par
\par
\tab res = serverMethods().GetPerson(); \par
\tab var obj = res.result.fields; \par
\par
\tab\'dd\'feler, mesela stringlist parametresi, i\'e7erisindeki stringlere eri\'femeye kalkt\'fd\'f0\'fdm\'fdz zaman biraz kontrolden \'e7\'fdkabilir.\par
\par
\tab var stringlist =  \par
  \tab res.result.fields.FMoreData.fields.FSerStringItemList; \par
\tab\tab $('#GetPersonWithData #list').val ( \par
  \tab stringlist[0].fields.FString + ' ' + \par
  \tab stringlist[1].fields.FString); \par
\par
\tab Bu kod ger\'e7ekten \'e7irkindir, ve karma\'fe\'fdk durumlarda Delphi'nin otomatik marshal y\'f6ntemini kullanmay\'fd engellememiz i\'e7in iyi bir sebeptir.\par
\tab\'ddstemci taraf\'fdndan y\'f6netilebilen ama biraz karma\'fe\'fdk olan bir veri yap\'fds\'fd, TDataSet i\'e7in Delphi'den d\'f6nen bir JSON format\'fdd\'fdr. G\'f6rd\'fc\'f0\'fcm\'fcz gibi ilk alan\'fdn ad\'fd "table" d\'fdr ve bir table header (tablo ba\'fel\'fd\'f0\'fd) ile dinamik olarak ayr\'fd\'fet\'fdr\'fdlabilece\'f0i \'feekilde metadatay\'fd i\'e7erir. (alanlar ve onlar\'fdn ayarlar\'fdndan olu\'fean bir dizi) \par
\par
\tab res = serverMethods().GetCustomers().result; \par
\tab var strHtml = '<tr>'; \par
\tab for (var n=0; n < res.table.length; n++) \{ \par
  \tab\tab strHtml = strHtml + '<th>' + res.table[n][0] + '</th> '; \par
\tab\} \par
\tab strHtml = strHtml + '</tr>' \par
\tab $('#GetCustomers #result').html(strHtml); \par
\par
\tab JSON sonucunda her alan i\'e7in de\'f0erlerin listesi ile birlikte ek bir alan daha vard\'fdr. Bu alanlar "kolona g\'f6re" olmas\'fdna ra\'f0men, bu dizi yap\'fds\'fd ve "kayda g\'f6re" olan ekstra alanlar\'fd ayr\'fd\'fet\'fdrabiliriz. Bunu ger\'e7ekle\'fetirmenin bir yolu, alanlardan biri i\'e7in kay\'fdt say\'fds\'fdn\'fd hersaplamak (mesela res.CustNo.length), kay\'fdt say\'fdlar\'fd \'fczerinde d\'f6ng\'fc kurmak (m de\'f0i\'fekeni ile), metadata i\'e7erisinde tekrar d\'f6ng\'fc kurmak (n de\'f0i\'fekeni ile), ana ana nesne d\'fczeyinde e\'fele\'feen bir alan bulmakt\'fdr.\par
\par
\tab fieldname = res.table[n][0];  \par
\tab fieldvalue = res[fieldname][m]; \par
\par
\tab Kula\'f0a kafa kar\'fd\'fet\'fdr\'fdc\'fd geldi\'f0ini biliyorum, ama b\'fct\'fcn koda bakman\'fdn i\'feleri anlamay\'fd kolayla\'fet\'fdraca\'f0\'fdn\'fd pek zannetmiyorum.\par
\par
\tab for (var m=0; m < res.CustNo.length; m++) \{ \par
  \tab\tab var strHtml = '<tr>'; \par
  \tab\tab for (var n=0; n < res.table.length; n++) \{ \par
    \tab\tab\tab fieldname = res.table[n][0]; \par
    \tab\tab\tab strHtml = strHtml + '<td>' + res[fieldname][m] + '</td> '; \par
  \tab\tab\} \par
  \tab\tab strHtml = strHtml + '</tr>' \par
\tab\}; \par
\par
\tab\'dd\'feleme, kolay olmaktan uzak olmas\'fdna ra\'f0men, ki burada kolon tabanl\'fd yap\'fdy\'fd kay\'fdt tabanl\'fd bir yap\'fdya \'e7evirmekten bahsediyoruz, i\'felenen kodla ilgili olarak g\'fczel olan \'feey; bunu sayfalamay\'fd etkinle\'fetirecek hale adapte etmek, REST sunucusunun kurulmu\'fe olan filtrelerine te\'feekk\'fcr ederek, son derece kolayd\'fdr. Yapmam\'fdz gereken \'feey, "t.r" HTTP parametresini ge\'e7mek, ve sunucu metod \'e7al\'fd\'fet\'fdr\'fdc\'fdy\'fd sayfa numaras\'fdn\'fd artt\'fdrmak i\'e7in her defas\'fdnda kullanmakt\'fdr. Bu \'f6rnekte, tamamen bir yerle\'fetirme istiyorsak ki genelde bunu isteriz, bir sayfada i\'feleyip bir sonrakine ge\'e7eriz. A\'fea\'f0\'fddaki \'f6nceki koda g\'f6re yap\'fdlacak anahtar de\'f0i\'feiklikler bulunmaktad\'fdr (B\'fct\'fcn kod i\'e7in de\'f0il).\par
\par
\tab var page = 0; \par
 \par
\tab $('#GetCustomers_paging #button').click (function ()\{ \par
  \tab\tab var methExec = serverMethods().executor; \par
  \tab\tab res = methExec.executeMethod("GetCustomers", "GET", [],  \par
    \tab\tab null, true, \{"t.r": (page*3+1 + ",3")\}, null); \par
 \par
  \tab\tab res = res.result[0]; \par
  \tab\tab // processing as above \par
 \par
  \tab\tab page++; \par
  \tab\tab $('#GetCustomers_paging #button').html("page"+(page+1)); \par
\tab\}); \par
\par
\tab jQuery'de basit\'e7e \'fcstesinden gelebilece\'f0imiz bir durum, resimler i\'e7in d\'f6nen ikili ak\'fd\'fet\'fdr. Burada yapmam\'fdz gereken \'feey, sunucuya ikili g\'f6sterimi d\'f6nd\'fcrmesi i\'e7in izin vermek (JSON d\'f6nd\'fcrmemesi i\'e7in), ve resim tag'inin src \'f6zelli\'f0ini (attribute) uygun bir URL adresine atamakt\'fdr.\par
\par
\tab $('#GetImage #result').attr ('src', \par
\tab\tab   '/datasnap/rest/TServerMethods1/GetImage'); \par
\par
\tab Bahsetmek istedi\'f0im son fonksiyon, sunucu taraf\'fdnda elle olu\'feturulan (bir TJSONArray yap\'fds\'fd kullanarak), stringlerden olu\'fean bir JSON dizisi d\'f6nd\'fcren GetNamesJson fonksiyonudur.\par
\par
\tab res = serverMethods().GetNamesJson(); \par
    \tab var array = res.result; \par
    \tab var strarray = ''; \par
    \tab for (var n=0; n<array.length; n++) \{ \par
      \tab\tab strarray = strarray + array[n] + ' '; \par
    \tab\}; \par
    \tab $('#GetNamesJson #result').val (strarray); \par
\par
\tab\'deimdi Delphi REST Sunucusunun d\'f6nd\'fcrece\'f0i, karma\'fe\'fdk veri yap\'fdlar\'fdn\'fd i\'felemek i\'e7in jQuery'yi nas\'fdl kullanaca\'f0\'fdm\'fdz\'fd biliyoruz, burada mevcut se\'e7eneklerden herhangi birini se\'e7ebiliriz, biri \'fcreysel veri giri\'feine kesinlikle uygundur. Ger\'e7ektei demo projeler genelde sunucu tarafl\'fd bilgiyi yans\'fdt\'fdyor, ben ise bir ad\'fdm ileri giderek bir nesnenin de\'f0erlerini d\'fczenleyecek bir istemci uygulamas\'fd geli\'fetirmek istiyorum. D\'fczenleme ile birlikte, ayn\'fd zamanda Delphi DataSnap REST sunucusunun, 4 anahtar HTTP metodunu destekleyerek nas\'fdl g\'fcncelleme, olu\'feturma, silme taleplerini ele ald\'fd\'f0\'fdn\'fd da \'f6\'f0renmi\'fe olacaks\'fdn\'fdz.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Nesneleri ve HTTP Metodlar\u305?n\u305? Y\'f6netmek ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab\'deimdi Delphi REST sunucusunun d\'f6nd\'fcrd\'fc\'f0\'fc veri t\'fcrlerini ve TJSONValue i\'e7in direkt deste\'f0ini, jQuery'nin basit bir \'feekilde anlat\'fdm\'fdn\'fd g\'f6rd\'fc\'f0\'fcm\'fcze g\'f6re, art\'fdk ben \'e7oklu \'f6zellikleri i\'e7eren verilen bir URL taraf\'fdndan desteklenen \'e7e\'feitli HTTP metodlar\'fdn\'fd y\'f6netmek i\'e7in g\'f6m\'fcl\'fc deste\'f0i olan bir proje geli\'fetirmek istiyorum. Burada fikir, sunucudan veriyi get metodunu kullanarak \'e7ekmek de\'f0il, ayr\'fdca JavaScript ile yaz\'fdlm\'fd\'fe basit bir taray\'fdc\'fd tabanl\'fd istemci \'fczerinden, sunucu taraftaki nesneleri kullan\'fdc\'fdn\'fdn d\'fczenlemesine izin vermektir. \par
\tab Bu uygulaman\'fdn arkas\'fdndaki veri yap\'fds\'fd, geleneksel bir t\'fcrdeki nesnelerin listesidir. (Bu daha nesne y\'f6nelimli bir \'feekilde yaz\'fdlabilir, ama uygulaman\'fdn hatr\'fd i\'e7in i\'feleri basit tutmaya \'e7al\'fd\'fet\'fdm)\par
\par
\tab type \par
  \tab\tab TMyData = class (TPersistent) \par
  \tab\tab public \par
    \tab\tab\tab Name: String; \par
    \tab\tab\tab Value: Integer; \par
  \tab\tab public \par
    \tab\tab\tab constructor Create (const aName: string); \par
  \tab\tab end;\par
\par
\tab Nesneler, Delphi 2009'dan beri Generics.Collections unit dosyas\'fdnda tan\'fdmlanan, TObjectDictionary<TKey, TValue> \'fcreysel ta\'fe\'fdy\'fdc\'fd s\'fdn\'fdf\'fd taraf\'fdndan \'fcretilen bir s\'f6zl\'fckte saklan\'fdr. Bu global nesne, program ba\'felad\'fd\'f0\'fd zaman bir ka\'e7 \'f6nceden tan\'fdmlanm\'fd\'fe nesne ile birlikte ba\'felat\'fdl\'fdr. Unutmamak gerekir ki, nesneleri eklemek, nesne ad\'fdn\'fdn s\'f6zl\'fck anahtar\'fd ile senkronize olup olmad\'fd\'f0\'fdndan emin olmak ve e\'f0er herhangi biri sa\'f0lanmam\'fd\'fesa onlara rastgele bir de\'f0er atamak i\'e7in belirledi\'f0im bir AddToDictionary prosed\'fcr\'fc kullan\'fdyorum.\par
\par
\tab var \par
  \tab\tab DataDict: TObjectDictionary <string,TMyData>; \par
 \par
\tab procedure AddToDictionary (const aName: string; nVal: Integer = -1); \par
\tab var \par
  \tab\tab md: TMyData; \par
\tab begin \par
  \tab\tab md := TMyData.Create (aName); \par
  \tab\tab if nVal <> -1 then \par
    \tab\tab md.Value := nVal; \par
\tab\tab DataDict.Add(aName, md); \par
\tab end; \par
 \par
\tab initialization \par
  \tab\tab DataDict := TObjectDictionary <string,TMyData>.Create; \par
  \tab\tab AddToDictionary('Sample'); \par
\par
\tab Bu veri yap\'fds\'fdna sahip olduktan sonra, eri\'femek ve de\'f0i\'fetirmek i\'e7in metodlar\'fd yazabiliriz. Veriyi okumak i\'e7in yazd\'fd\'f0\'fdm MyData fonksiyonuna bakarsak.\par
\par
\tab function TObjectsRest.MyData(name: string): TJSONObject; \par
\tab var \par
  \tab\tab md: TMyData; \par
\tab begin \par
  \tab\tab md := DataDict[name]; \par
  \tab\tab Result := TJSONObject.Create; \par
  \tab\tab Result.AddPair( \par
    \tab\tab TJSONPair.Create ('Name', md.Name)); \par
  \tab\tab Result.AddPair( \par
    \tab\tab TJSONPair.Create ('Value',  \par
      \tab\tab TJSONNumber.Create(md.Value))); \par
\tab end; \par
\par
\tab G\'f6rd\'fc\'f0\'fcn\'fcz gibi, bir TJSONObject olu\'feturdum ve isim ve de\'f0er alan\'fdna iki \'e7ift veya \'f6zellik ekledim.\par
\par
\tab\{"result":[\{ \par
  \tab\tab "Name":"Sample", \par
  \tab\tab "Value":"7016" \par
\tab\}]\} \par
\par
\tab E\'f0er a\'fea\'f0\'fddaki URL adresini taray\'fdc\'fdn\'fdza yaz\'fdp \'e7al\'fd\'fet\'fdr\'fdrsan\'fdz yukar\'fddaki sonucu elde edersiniz.\par
\par
\tab{\field{\*\fldinst{HYPERLINK "http://localhost:8080/datasnap/rest/TObjectsRest/MyData/Sample"}}{\fldrslt{\ul\cf2 http://localhost:8080/datasnap/rest/TObjectsRest/MyData/Sample}}}\f1\fs20  \par
\par
\tab Yukar\'fddaki URL, Delphi'nin REST kodlamas\'fdn\'fdn neden parametreleri yolda ge\'e7meniz gerekti\'f0ine a\'e7\'fdkl\'fdk getirmektedir. Bir REST URL'si kayna\'f0a referans g\'f6sterdi\'f0inde, ve her kaynak i\'e7in bir metod yazmak istemiyorsan\'fdz, nesne ID bilgisini (burada Sample) yolda bulundurman\'fd, ayr\'fdca parametre olarak ge\'e7meniz gerekmektedir.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- TJSONArray ile Nesneleri Listeleme ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Bir nesne listesine sahipseniz, bunun elemanlar\'fdna eri\'feme ihtiyac\'fdn\'fdz olur. Kullan\'fdc\'fd aray\'fcz\'fcn\'fc olu\'feturmak i\'e7in ihtiyac\'fdm\'fdz olan \'feey, listedeki nesnelerin isimleridir. Liste d\'f6nd\'fcrmek i\'e7in TJSONArray kullanmal\'fdy\'fdz, bu olayda s\'f6zl\'fckteki Keys alanlar\'fd i\'e7in bir enum kullanmak i\'e7in olu\'feturdu\'f0um bir string dizisidir.\par
\tab\par
\tab function TObjectsRest.List: TJSONArray; \par
\tab var \par
  \tab\tab str: string; \par
\tab begin \par
  \tab\tab Result := TJSONArray.Create; \par
  \tab\tab for str in DataDict.Keys do \par
  \tab\tab begin \par
    \tab\tab\tab Result.Add(str); \par
  \tab\tab end; \par
\tab end;  \par
\par
\tab Bu \'e7a\'f0r\'fdn\'fdn sonucu, result ad\'fdndaki bir diziye parametre olarak g\'f6nderdi\'f0imiz JSON format\'fdnda bir dizidir. (Bundan dolay\'fd ikili olarak i\'e7i\'e7e ge\'e7en bir g\'f6sterim vard\'fdr)\par
\par
\tab\{"result":[ \par
  \tab\tab ["Test","Sample"] \par
\tab ]\} \par
\par
\tab\'deimdi, de\'f0er listelerini d\'f6nd\'fcrerek ve her ba\'fel\'fdba\'fe\'fdna her eleman\'fd getirebildi\'f0imizden, bir kullan\'fdc\'fd aray\'fcz\'fc olu\'feturmaya ba\'felayabiliriz.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- \u304?stemciyle Ba\'balamak - Liste ve De\u287?erler ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Kullan\'fdc\'fdn\'fdn bir tanesini se\'e7mesi i\'e7in nesnelerin listeleri ile ilk HTML'i olu\'feturmak yerine, tamamen AJAX modelini kullanabiliriz. Ba\'felang\'fd\'e7taki HTML sayfas\'fd, HTML elemanlar\'fd ve JavaScript kodlar\'fd d\'fd\'fe\'fdnda ger\'e7ek veriye sahip olmayacakt\'fdr. Bu, bo\'fe HTML'dir.\par
\par
\tab <div>List of objects: \par
    \tab\tab <br> \par
    \tab\tab <div id="list" style="padding-left: 20px"></div> \par
    \tab\tab <br> \par
    \tab\tab <a href="#" id="refresh">Refresh List</a> \par
  \tab </div> \par
  \tab <hr> \par
\par
\tab Kullan\'fdc\'fdn\'fdn araya girme durumu olmadan sayfa y\'fcklendi\'f0inde, sayfa sunucuya ger\'e7ek veriyi (refreshList() fonksiyonunda) sormak i\'e7in bir AJAX \'e7a\'f0r\'fds\'fdnda bulunacak ve kullan\'fdc\'fd aray\'fcz\'fcn\'fc yerle\'feim b\'f6lgesi haline getirecektir (populate). Ayn\'fd fonksiyon refresh anchor'u i\'e7erisindeki click olay\'fdnda bir olay tetikleyicisi olarak kurulur.\par
\par
\tab $(document).ready(function() \{ \par
  \tab\tab // populate the UI   \par
  \tab\tab refreshList(); \par
 \par
  \tab\tab // redo the operation when refresh is clicked \par
\tab\tab $("#refresh").click(function(e) \{ \par
    \tab\tab\tab refreshList(); \par
\tab\}); \par
\par
\tab refreshList() fonksiyonu sonu\'e7 olarak d\'f6nen diziyi taramak i\'e7in bir d\'f6ng\'fc kullan\'fdr. Burada jQuery'nin $.each numaraland\'fdrma (enumeration) mekanizmas\'fdn\'fd kullanabilirdim ama bu, kodu okumak i\'e7in fazla karma\'fe\'fdk hale getirirdi. Bu for d\'f6ng\'fcs\'fc, verilen ID ile zaman yer tutucusunda (span placeholder) ilerde g\'f6sterilecek olan, HTML'i olu\'feturur.\par
\par
\tab function refreshList() \par
\tab\{ \par
  \tab\tab thearray = serverMethods().List().result; \par
  \tab\tab var theMarkup = ["<br>"]; \par
  \tab\tab for (var i=0; i < thearray.length; i++) \{ \par
    \tab\tab\tab theMarkup = theMarkup +  "<a href='#'>" +  \par
      \tab\tab\tab thearray[i] + "</a><br>"; \par
  \tab\tab\}; \par
\tab\};  \par
\par
\tab JSON dizisinde d\'f6nen de\'f0erlerin listesinin bulundu\'f0u \'f6rnek \'e7\'fdkt\'fd a\'fea\'f0\'fddad\'fdr (Makalede ilgili resme bak\'fdn)\par
\tab Burada biraz daha kod geli\'fetirmemiz gerekiyor. Liste i\'e7in HTML'imiz oldu\'f0unda, bu linklerin koduna, se\'e7ilen her giri\'fe i\'e7in sayfan\'fdn alt taraf\'fdnda yer alan ili\'fekili sunucu tarafl\'fd nesneyi istemci uygulaman\'fdn y\'fckleyebilmesi i\'e7in, ba\'f0lanmam\'fdz gerekir. Bu, div alt\'fdndaki b\'fct\'fcn anchorlara (<a> taglar\'fd) tek bir olayla ba\'f0lanan standart bir jQuery stili ile becerilebilir. B\'fct\'fcn kodu ile birlikte refreshList() fonksiyonunun son hali a\'fea\'f0\'fddaki gibidir.\par
\par
\tab function refreshList() \par
\tab\{ \par
  \tab\tab thearray = serverMethods().List().result; \par
  \tab\tab var theMarkup = ["<br>"]; \par
  \tab\tab for (var i=0; i < thearray.length; i++) \{ \par
    \tab\tab\tab theMarkup = theMarkup +  "<a href='#'>" +  \par
      \tab\tab\tab thearray[i] + "</a><br>"; \par
  \tab\tab\} \par
  \tab\tab // add markup to container \par
  \tab\tab $("#list").html(theMarkup); \par
  \tab\tab $("#list").find("a").click(function(e) \{ \par
    \tab\tab\tab theObj = serverMethods().MyData ($(this).html()); \par
    \tab\tab\tab TMyDataToForm (theObj.result); \par
  \tab\tab\}); \par
\tab\}; \par
\par
\tab Unutmamak gerekir ki yukar\'fddaki kodda $(this) deyiminin kullan\'fdm\'fd, o anki nesne veya olay tetikleyen nesneye referans olur. (Az \'e7ok VCL olay tetikleyicisindeki, Sender parametresine benzer \'feekilde davran\'fdr, her ne kadar dil terminolojisinde this is deyimi self deyimine daha \'e7ok benzese de)\par
\tab Kullan\'fdc\'fd, nesne listesindeki bir linke t\'fdklad\'fd\'f0\'fd zaman, JavaScript uygulamas\'fd HTML metni i\'e7inden nesnenin ad\'fdn\'fd al\'fdr ve MyData sunucu fonksiyonunu \'e7a\'f0\'fdrmak i\'e7in bir parametre olarak kullan\'fdr. Nesne verisi i\'e7in geli\'fetirilen kullan\'fdc\'fd aray\'fcz\'fc, ilerde nesne verisini i\'feletmek i\'e7in de kullan\'fdlacak olan 2 adet input box'tan olu\'feur. Veri, bu 2 inputa yard\'fdmc\'fd fonksiyon olan TMyDataToForm kullan\'fdlarak ta\'fe\'fdn\'fdr.\par
\par
\tab function TMyDataToForm (anObj) \par
\tab\{ \par
   \tab\tab $("#TMyData #Name").val(anObj.Name); \par
   \tab\tab $("#TMyData #Value").val(anObj.Value); \par
\tab\}; \par
\par
\tab Bu kod, kullan\'fdc\'fd aray\'fcz\'fcn\'fcn s\'fdn\'fdf ad\'fd ile ayn\'fd bir div'e ve JSON nesnelerinin \'f6zelliklerine benzer bir \'feekilde \'e7a\'f0r\'fdlan 2 input eleman\'fd oldu\'f0u zann\'fdyla \'e7al\'fd\'fe\'fdr. A\'fea\'f0\'fddaki kod, bir alt\'fdndaki resmi taray\'fdc\'fd i\'e7erisinde sayfan\'fdn tamam\'fdnda g\'f6steren bir ili\'fekili HTML kod kesimidir. (Makalede ilgili resme bak\'fdn)\par
\par
\tab <div id="TMyData"> \par
  \tab\tab <p>Current Element: \par
  \tab\tab <br/> \par
  \tab\tab <input type="text" id="Name" size="50" value=""> \par
  \tab\tab <br/> \par
  \tab\tab <input type="text" id="Value" size="50" value=""> \par
\tab </div> \par
\par
\tab Yukar\'fdda da g\'f6rd\'fc\'f0\'fcm\'fcz gibi, program bir veriyi almam\'fdza izin verir, ayr\'fdca en s\'fdk kullan\'fdlan i\'felemler i\'e7in 3 adet buton bar\'fdnd\'fdr\'fdr (CRUD aray\'fcz\'fc - Create,Read,Update,Delete : Olu\'fetur,Oku,G\'fcncelle,Sil). Bu HTML'de PUT,GET,POST ve DELETE ad\'fd verilen 4 \'e7ekirdek HTML metodu ile desteklenir. Bir sonraki konuda Delphi REST Sunucusunun bu metodlar\'fd nas\'fdl destekledi\'f0ini i\'feleyece\'f0iz.\par
\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Oku,G\'fcncelle,Yaz,Sil (Get,Post,Put,Delete) ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab\'deimdi REST sunucusundan sadece veriyi nas\'fdl alaca\'f0\'fdm\'fdz\'fd g\'f6rd\'fck, ama g\'fcncelleme nas\'fdl olacak? REST'teki genel fikir birli\'f0i, i\'felemleri tan\'fdmlamak i\'e7in \'f6zel URL kullanmay\'fd engellemek, ama sunucu tarafl\'fd nesneleri tan\'fdmlamak i\'e7in \'f6zel bir URL kullanmak (daha \'f6nce listeledi\'f0im MyData/Sample gibi) ve ne yap\'fdlaca\'f0\'fdn\'fd belirtmek i\'e7in HTTP metodlar\'fdn\'fd kullanmakt\'fdr.\par
\tab E\'f0er Delphi'nin REST deste\'f0i basit\'e7e URL'leri sunucu s\'fdn\'fdf metoduna e\'fele\'fetirmeyi destekliyorsa, \'feanss\'fdz\'fdz demektir. (Ayn\'fd metod 4 i\'felemi de kullanabilir) Delphi, bunun yerine, URL ve HTTP metodunu sunucu metodu ile e\'fele\'fetirir. Kullan\'fdlan \'feema olduk\'e7a basittir, yap\'fdlacak i\'felemin ad\'fdi metod ad\'fdn\'fdn \'f6n\'fcne eklenir.\'deu haritalamay\'fd kullan\'fdr\par
\par
\tab GET\tab\tab get (varsay\'fdland\'fdr, ihmal edilebilir)\par
\tab POST\tab\tab update (g\'fcncelleme)\par
\tab PUT\tab\tab accept (kabul etme)\par
\tab DELETE\tab cancel (iptal etme)\par
\par
\tab Bu e\'fele\'fetirmeleri, DSHTTPWebDispatcher bile\'feeninin ili\'fekili 4 olay tetikleyicisini ele alarak de\'f0i\'fetirebilirsiniz. E\'f0er \'e7e\'feitli i\'felemler i\'e7in standart isimlendirme kurallar\'fdn\'fd kullanmak isterseniz, sunucu s\'fdn\'fdf\'fd a\'fea\'f0\'fddaki gibi tan\'fdmlaman\'fdz gerekir.\par
\par
\tab type \par
  \tab TObjectsRest = class(TPersistent) \par
  \tab\tab public \par
    \tab\tab\tab function List: TJSONArray; \par
    \tab\tab\tab function MyData (name: string): TJSONObject; \par
    \tab\tab\tab procedure updateMyData (const aName: string;  \par
      \tab\tab\tab jObject: TJSONObject); \par
    \tab\tab\tab procedure cancelMyData (name: string); \par
    \tab\tab\tab procedure acceptMyData (const aName: string;  \par
      \tab\tab\tab jObject: TJSONObject); \par
  \tab end; \par
\par
\tab Bir eleman\'fd almak veya silmek istersek, sadece nesnenin ID bilgisi veya ismine ihtiyac\'fdm\'fdz olacakt\'fdr. Olu\'feturma veya g\'fcncelleme i\'e7in, ayr\'fdca veriyi de ge\'e7memiz gerekir. Bu \'e7ok basit durumda, sadece ikinci bir veri olur, ama genelde bundan \'e7ok daha fazla veri girilecektir. \'ddlgin\'e7 bir \'e7\'f6z\'fcm ise (tamamen DataSnap taraf\'fdndan desteklenen) ikinci parametreyi, kullan\'fdc\'fd aray\'fcz\'fcndeki b\'fct\'fcn alanlar\'fd i\'e7erecek bir nesne olarak g\'f6ndermektir.\par
\tab Bu 3 yeni metodun yaz\'fdl\'fd\'fe\'fd daha kolay ve direkttir \'e7\'fcnk\'fc herhangi bir de\'f0er d\'f6nd\'fcrmemize gerek yoktur. (B\'fct\'fcn parametrelerin dolu olup olmad\'fd\'f0\'fdn\'fd ve sunucu taraf\'fdndaki nesnenin mevcut olup olmad\'fd\'f0\'fdn\'fd kontrol etti\'f0imi s\'f6ylemem gerek yok herhalde)\par
\par
\tab procedure TObjectsRest.updateMyData (const aName: string;  \par
  \tab jObject: TJSONObject); \par
\tab var \par
  \tab\tab md: TMyData; \par
\tab begin \par
  \tab\tab md := DataDict[aName]; \par
  \tab\tab md.Value := StrToIntDef ( \par
    \tab\tab jObject.Get('Value').JsonValue.Value, 0); \par
\tab end; \par
\par
\tab procedure TObjectsRest.cancelMyData(const name: string); \par
\tab begin \par
  \tab\tab DataDict.Remove(name); \par
\tab end; \par
 \par
\tab procedure TObjectsRest.acceptMyData(const aName: string;  \par
  \tab jObject: TJSONObject); \par
\tab var \par
  \tab\tab md: TMyData; \par
\tab begin \par
  \tab\tab md := TMyData.Create (aName); \par
  \tab\tab md.Value := StrToIntDef ( \par
    \tab\tab jObject.Get('Value').JsonValue.Value, 0); \par
  \tab\tab DataDict.Add(aName, md); \par
\tab end; \par
\par
\tab\par
\cf1\lang1033\f0\fs24\par
\ul\b --- \u304?stemci Tarafta D\'fczeltme ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab Art\'fdk sunucu taraf\'fdnda CRUD i\'felemlerine sahip oldu\'f0umuza g\'f6re, \'feimdi JavaScript istemci uygulamam\'fdz\'fd 3 adet d\'fczenleme butonunu kaynak kodlar\'fd ile ekleyerek bitirebiliriz. (Taray\'fdc\'fd tabanl\'fd kullan\'fdc\'fd aray\'fcz\'fc resmiyle birlikte daha \'f6nce g\'f6sterildi)\par
\tab Delphi taraf\'fdndan \'fcretilen JavaScript proxy'si sunucu taraftaki e\'fede\'f0erlerine benzer isimlerde metodlar i\'e7erecektir. (Ne olursa olsun ayn\'fd URL ve farkl\'fd HTTP metodudur bunlar). Di\'f0er \'f6nemli bir par\'e7a bilgi ise Delphi'ye bir JSON nesnesi ge\'e7mek i\'e7in, sadece yapmam\'fdz gereken bir JavaScript nesnesi ge\'e7mektir. 3 buton ve kaynak kodu \'feu \'feekildedir.\par
\par
\tab $("#buttonUpdate").click(function(e) \{ \par
  \tab\tab var mydata = new Object; \par
  \tab\tab FormToTMyData (mydata); \par
  \tab\tab serverMethods().updateMyData (mydata.Name, mydata); \par
\tab\}); \par
 \par
\tab $("#buttonDelete").click(function(e) \{ \par
  \tab\tab serverMethods().cancelMyData ($("#TMyData #Name").val()); \par
  \tab\tab refreshList(); \par
\tab\}); \par
 \par
\tab $("#buttonNew").click(function(e) \{ \par
  \tab\tab var mydata = new Object; \par
  \tab\tab FormToTMyData (mydata); \par
  \tab\tab serverMethods().acceptMyData (mydata.Name, mydata); \par
  \tab\tab refreshList(); \par
\tab\}); \par
\par
\tab Veriyi kullan\'fdc\'fd aray\'fcz\'fcne ta\'fe\'fdmaya benzer olarak, istemci program bunu geri almak i\'e7in bir destek fonksiyonu kullan\'fdr.\par
\par
\tab function FormToTMyData (anObj)\{  anObj.Name = $("#TMyData #Name").val();  \par
\tab anObj.Value = $("#TMyData #Value").val();\}; \par
\par
\tab S\'fdn\'fdf\'fdm\'fdza eklenen 3 metod ve uygun JavaScript \'e7a\'f0r\'fdlar\'fd ile birlikte REST sunucusunda nesne olu\'feturmak ve d\'fczenlemek i\'e7in tamamen taray\'fdc\'fd tabanl\'fd bir kullan\'fdc\'fd aray\'fcz\'fc \'f6rne\'f0ine sahip olmu\'fe oluyoruz. Bu projede Delphi ve JavaScript'te kolayca i\'felenebilecek bir format olan JSON nesnelerini hem ileri hem de geri olarak parametre olarak g\'f6nderdik.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- \lang1055\f3\'dd\lang1033\f0\'balemi RTTI ile Otomatikle\'batirmek ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab\'deimdi \'e7ok alana sahip daha karma\'fe\'fdk bir veri yap\'fds\'fd oldu\'f0unu farz edelim. Delphi s\'fdn\'fdflar\'fdndan JSON olu\'feturup bunu sunucu uygulama i\'e7erisinde kaydetmek, ve taray\'fdc\'fdda JavaScript nesnelerini HTML kullan\'fdc\'fd aray\'fcz\'fc elemanlar\'fd ile e\'fele\'fetirmek vs. gerekir.\par
\tab Pek \'e7ok durumda bu t\'fcr bir e\'fele\'fetirme basitle\'fetirilebilir, ama tamamen otomatikle\'fetirilemez. Mesela bu e\'fele\'fetirmeyi yapmak i\'e7in Delphi'nin RTTI'sini kullanabiliriz. (Yeni geni\'feletilmi\'fe RTTI, Delphi 2010'dan beri mevcuttur) Verilen bir Delphi nesnesinin public \'f6zelliklerinin JSON g\'f6sterimini a\'fea\'f0\'fddaki kodla olu\'feturabiliriz (\'d6rne\'f0e ekledi\'f0im RestPlusUtils unit dosyas\'fdn\'fdn bir par\'e7as\'fdd\'fdr)\par
\par
\tab function ObjectToJson (obj: TObject): TJSOnObject; \par
\tab var \par
  \tab\tab context: TRttiContext; \par
  \tab\tab aProperty: TRttiProperty; \par
\tab begin \par
  \tab\tab Result := TJSONObject.Create; \par
  \tab\tab for aProperty in context.GetType(obj.ClassInfo).GetProperties do \par
    \tab\tab\tab Result.AddPair(TJSONPair.Create ( \par
        \tab\tab\tab aProperty.Name,     \par
        \tab\tab\tab aProperty.GetValue(obj).ToString)); \par
\tab end;  \par
\par
\tab Ger\'e7ek hayatta, daha \'f6zel veri t\'fcrlerini (Boolean ve Date gibi) ele almak zorunda kal\'fdr\'fdz ama koddaki ana fikir gayet a\'e7\'fdkt\'fdr.\par
\tab Tersi olarak, sunucu bir JSON nesnesi ald\'fd\'f0\'fdnda, bu JSON verisini Delphi datas\'fd olarak kaydedebilir. (Bu zaman, en az bas\'fd veri t\'fcrlerini hesaba katmak gerekir) Unutmamak gerekir ki, her \'f6zellik i\'e7in uygun bir JSON de\'f0eri aramal\'fdy\'fdz, ama kaybolmu\'fesa \'e7ok da sorun de\'f0il.\par
\par
\tab procedure JsonToObject (obj: TObject; jObject: TJSOnObject); \par
\tab var \par
  \tab\tab context: TRttiContext; \par
  \tab\tab aProperty: TRttiProperty; \par
  \tab\tab jPair: TJsonPair; \par
\tab begin \par
  \tab\tab for aProperty in context.GetType(obj.ClassInfo).GetProperties do \par
  \tab\tab begin \par
    \tab\tab\tab jPair := jObject.Get (aProperty.Name); \par
    \tab\tab\tab if Assigned (jPair) then \par
    \tab\tab\tab begin \par
      \tab\tab\tab\tab if aProperty.PropertyType.IsOrdinal then \par
        \tab\tab\tab\tab\tab aProperty.SetValue(obj, StrToIntDef ( \par
          \tab\tab\tab\tab jPair.JsonValue.Value, 0)) // not always string \par
      \tab\tab\tab\tab else \par
        \tab\tab\tab\tab\tab aProperty.SetValue(obj, jPair.JsonValue.Value); // string \par
    \tab\tab\tab end; \par
  \tab\tab end; \par
\tab end; \par
\par
\tab Art\'fdk JSON ile e\'fele\'fetirilen Delphi nesnelerini d\'f6nd\'fcrebilir ve alabiliriz.\par
\par
\tab function TObjectsRest.MyData(const aName: string): TJSONObject; \par
\tab var \par
  \tab\tab md: TMyData; \par
\tab begin \par
  \tab\tab md := DataDict[aName]; \par
  \tab\tab Result := ObjectToJson (md); \par
\tab end; \par
 \par
\tab procedure TObjectsRest.updateMyData (const aName: string;  \par
  \tab jObject: TJSONObject); \par
\tab var \par
  \tab\tab md: TMyData; \par
\tab begin \par
  \tab\tab md := DataDict[aName]; \par
  \tab\tab JsonToObject (md, jObject); \par
\tab end; \par
\par
\tab Be \'feekilde yaz\'fdld\'fd\'f0\'fdnda, sunucu verilen bir nesnenin JSON versiyonunu d\'f6nd\'fcrebilir ve JSON verisini herhangi bir Delphi nesnesini g\'fcncellemek i\'e7in kabul edebilir. Ayr\'fdca program, JavaScript nesnesini (JSON taraf\'fdndan temin edilen) HTML kullan\'fdc\'fd aray\'fcz\'fcne e\'fele\'fetirmenize yard\'fdmc\'fd olabilir. Div'i s\'fdn\'fdf ad\'fd ve \'f6zellik isimleri ile birlikte birbirinden ayr\'fd girdilerde kullanmak \'feart\'fdyla, Delphi uygulamas\'fdn\'fdn i\'e7inden e\'fele\'femi\'fe JavaScript kodunu olu\'feturman\'fdz m\'fcmk\'fcnd\'fcr.\par
\tab Daha \'f6nce g\'f6sterilen (TMyDataToForm ve FormToTMyData) 2 JavaScript e\'fele\'fetirme metodu tamamen olu\'feturuldu. GenerateMapper ad\'fdndaki sunucudaki fonksiyon, RTTI'yi temel al\'fdr ve RestPlusUtils unit dosyas\'fdn\'fdn bir par\'e7as\'fdd\'fdr. Onun kodundan bir par\'e7a a\'fea\'f0\'fddad\'fdr.\par
\par
\tab sList.Add ('function ' + aClass.classname + 'ToForm (anObj)'); \par
\tab sList.Add ('\{'); \par
\tab for aProperty in context.GetType(aClass.ClassInfo).GetProperties do \par
\tab begin \par
  \tab\tab // outputs JS like: $("#TMyData #Name").val(anObj.Name); \par
  \tab\tab sList.Add ('   $("#' + aClass.classname + ' #' + aProperty.Name +  \par
    \tab\tab '").val(anObj.' + aProperty.Name + ');'); \par
\tab end; \par
\tab sList.Add ('\};'); \par
\par
\tab Bu JavaScript kodu sunucuda nas\'fdl mevcut olabilir? WebFileDispatcher1BeforeDispatch olay tetikleyicisini d\'fczenledim (varsay\'fdlan olarak serverfunctions.js dosyas\'fdn\'fd yeniden olu\'feturmakla ilgilenen metod) ve a\'fea\'f0\'fddaki durumu ekledim.\par
\par
\tab if SameFileName(ExtractFileName(AFileName), 'uimapper.js') then \par
  \tab begin \par
    \tab\tab Handled := True; \par
    \tab\tab Response.ContentType := 'text/javascript'; \par
    \tab\tab Response.Content := GenerateMapper (TMyData); \par
  \tab end; \par
\par
\tab JavaScript dosyas\'fdn\'fd d\'f6nd\'fcrmeden \'f6nce g\'fcncellemek yerine, sihirbaz taraf\'fdndan olu\'feturulan kodun serverfunctions.js i\'e7in yapt\'fd\'f0\'fd gibi, ben de JavaScript i\'e7eri\'f0ini dinamik olarak olu\'feturulan bir string olarak geri d\'f6nd\'fcr\'fcyorum. HTML i\'e7erisindeki bu JavaScript kayna\'f0\'fdn\'fdn URL bilgisine basit\'e7e bir referans ekliyorum ve e\'f0er sunucu taraf\'fdndaki nesneye yeni \'f6zellikler eklersek kodun \'e7al\'fd\'fet\'fd\'f0\'fdn\'fd ve otomatik olarak kendini g\'fcncelledi\'f0ini g\'f6rebiliyoruz. (Tabi HTML kullan\'fdc\'fd aray\'fcz\'fcn\'fc de buna g\'f6re g\'fcncellemek \'feart\'fdyla)\par
\tab Daha \'f6nce sadece iki alan\'fd olan kulland\'fd\'f0\'fdm s\'fdn\'fdf, ve elle e\'fele\'fetirme her \'feekilde basittir. jObjects \'f6rnek projesinde, bununla beraber \'e7e\'feitli \'f6zellikleri olan bir ikinci s\'fdn\'fdf daha vard\'fdr.\par
\par
\tab type \par
  \tab TCompanyData = class \par
  \tab\tab private \par
    \tab\tab\tab ... \par
  \tab\tab public \par
    \tab\tab\tab property CompanyName: string  \par
      \tab\tab\tab\tab read FCompanyName write SetCompanyName; \par
\tab\tab\tab  property Address: string  \par
      \tab\tab\tab\tab read FAddress write SetAddress; \par
    \tab\tab\tab property City: string  \par
      \tab\tab\tab\tab read FCity write SetCity; \par
    \tab\tab\tab property ZipCode: string  \par
      \tab\tab\tab\tab read FZipCode write SetZipCode; \par
    \tab\tab\tab property State: string  \par
      \tab\tab\tab\tab read FState write SetState; \par
    \tab\tab\tab property Country: string  \par
      \tab\tab\tab\tab read FCountry write SetCountry; \par
    \tab\tab\tab property ContactFullName: string  \par
      \tab\tab\tab\tab read FContactFullName write SetContactFullName; \par
    \tab\tab\tab property ContactEmail: string  \par
      \tab\tab\tab\tab read FContactEmail write SetContactEmail; \par
    \tab\tab\tab property ContactPhone: string  \par
      \tab\tab\tab\tab read FContactPhone write SetContactPhone; \par
  \tab end; \par
\par
\tab Tekrardan belirtmek gerekirse, bu 4 HTTP metodunu bu tarz bir nesneyi y\'f6netmek i\'e7in g\'f6steren bir s\'fdn\'fdft\'fdr. (Bu olayda liste yoktur ama burda kodlaman\'fdn detay\'fd i\'e7in ger\'e7ek kaynak koda referans g\'f6steren bir tek bellekte nesne vard\'fdr)\par
\par
\tab\{$METHODINFO ON\}   \par
\tab type \par
  \tab TCompanyServer = class (TPersistent) \par
  \tab\tab public \par
    \tab\tab\tab function Company: TJSONObject; \par
    \tab\tab\tab procedure updateCompany (jObject: TJSONObject); \par
    \tab\tab\tab procedure cancelCompany; \par
    \tab\tab\tab procedure acceptCompany (jObject: TJSONObject); \par
  \tab end; \par
\par
\tab Web mod\'fcl\'fcne TCompanyServer ile ba\'f0lanan yeni bir DataSnap sunucu s\'fdn\'fdf\'fd ekledim. Yeni bir hareket, yeni bir sayfa \'fcreticisine ba\'f0land\'fd ve s\'fdn\'fdf deste\'f0i de olu\'feturulan uimapper.js dosyas\'fdnda bulunmaktad\'fdr.\par
\tab Art\'fdk kullan\'fdc\'fd aray\'fcz\'fcn\'fc olu\'feturmam i\'e7in yapmam gereken \'feey, bir \'f6nceki HTML dosyas\'fdn\'fd klonlamak ve veri giri\'fei formunu uygun veri giri\'fei alanlar\'fdn\'fd ekleyerek de\'f0i\'fetirmektir. Yeni HTML \'feablonunda (company.html), butonlar\'fdn 4 i\'felemi ger\'e7ekle\'fetirece\'f0i kemi\'f0ine kadar s\'fdyr\'fdlm\'fd\'fe basit bir veri giri\'fei formu olu\'feturdum. Bu durumda ger\'e7ekten tembelsiniz (ya da uygulaman\'fdn ba\'felang\'fd\'e7 noktas\'fdndas\'fdn\'fdz), sunucu zaten kemi\'f0ine kadar s\'fdyr\'fdlm\'fd\'fe basit bir form olu\'feturabilir, ve kullan\'fdc\'fd aray\'fcz\'fc olu\'feturabilir. Bu, di\'f0er web geli\'fetirme \'e7evrelerince de kullan\'fdlan ve iskele ad\'fd verilen bir tekniktir.\par
\tab\'c7ok ba\'felang\'fd\'e7 demosu olarak, RestPlusUtils unit dosyas\'fdna a\'fea\'f0\'fddaki \'f6zel tag kullanarak etkinle\'fetirilecek bir HtmlFormForClass fonksiyonu ekledim.\par
\par
\tab <!-- automatic form --> \par
\tab <#scaffolding class="CompanyData.TCompanyData"> \par
\par
\tab Bu tag sunucu taraf\'fdndan \'fcretilir, s\'fdn\'fdf\'fdn nitelendirilmi\'fe ad\'fdn\'fd (unit ve s\'fdn\'fdf ad\'fd) tutan \'f6zellik de\'f0erini \'e7\'fdkar\'fdr. Ve bu tag yeni RTTI taraf\'fdndan bir s\'fdn\'fdf\'fd kay\'fdt olma gereksinimlerine gerek kalmadan bulmak i\'e7in kullan\'fdl\'fdr.\par
\par
\tab // in TWebModule2.ServerFunctionInvokerHTMLTag \par
  \tab else if  SameText(TagString, 'scaffolding') then \par
  \tab begin \par
    \tab\tab ReplaceText := HtmlFormForClass (TagParams.Values['class']); \par
  \tab end; \par
\par
\tab HTML dosyas\'fdnda o anki versiyonun biraz daha g\'fczel formatta yaz\'fdlm\'fd\'fe hali olmas\'fdna ra\'f0men, iskele tekni\'f0i kullanarak olu\'feturulan formun g\'f6r\'fcn\'fcm\'fc a\'fea\'f0\'fddaki gibidir. (Makalede ilgili resme bak\'fdn)\par
\tab Sormadan \'f6nce, evet, bu \'e7ekirdek mimarinin geni\'feletilmi\'fe hali ile \'e7al\'fd\'fet\'fdm. Bu geni\'feletilmi\'fe halinde, daha \'e7ok veri t\'fcr\'fc i\'e7in belirlenmi\'fe destek, geni\'feletilmi\'fe taray\'fdc\'fd tabanl\'fd do\'f0rulama ve di\'f0er pek \'e7ok g\'fczellik var. Bununla ilgili daha \'e7ok bilgi edinmekte \'f6zg\'fcrs\'fcn\'fcz.\par
\cf1\lang1033\f0\fs24\par
\ul\b --- Veri Y\'f6nelimli REST Sunucular\u305? ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab E\'f0er DataSnap'in arkas\'fdndaki orjinal fikir, veri tablolar\'fdn\'fd \'e7ok katmanl\'fd bir sunucudan istemci uygulamaya ta\'fe\'fdmaksa, DataSnap'deki REST deste\'f0inin ilk olarak odakland\'fd\'f0\'fd noktan\'fdn uzaktan metod \'e7a\'f0\'fdrma olmas\'fd biraz gariptir. REST sunucusundan bir dataset d\'f6nd\'fcrebilirsiniz, ama kolon tabanl\'fd format belirlenmi\'fe bir kullan\'fdc\'fd aray\'fcz\'fc deste\'f0i olmad\'fd\'f0\'fd ger\'e7e\'f0i ile birle\'feir, ve bu da dataset y\'f6netim deste\'f0ini s\'fdn\'fdrl\'fd bir hale getirir. Burada size, bu format\'fdn tepesine basit bir HTML tablosu olu\'feturmay\'fd ve sayfalama deste\'f0ine ba\'f0lanmay\'fd g\'f6sterece\'f0im.\par
\tab G\'f6rd\'fc\'f0\'fcm\'fcz gibi, bununla beraber, Delphi'nin REST mimarisinden geleneksel bir JSON veri t\'fcr\'fc d\'f6nd\'fcrmek kolayd\'fdr, bu y\'fczden kullan\'fdc\'fd aray\'fcz\'fcn\'fc geli\'fetirmenin yan\'fdnda, sunucu taraf\'fdndaki i\'felemleri gelenekselle\'fetirmek i\'feleri daha basit hale getirir. Ayr\'fdca geleneksel bir HTML kullan\'fdc\'fd aray\'fcz\'fc geli\'fetirmektense, var olan data grid bile\'feenlerini avantajlar\'fdn\'fd kullanmak gerekir. Bu da son konuda ve \'f6rnekte odaklanaca\'f0\'fdm\'fdz konudur.\par
\tab Sunucu program basittir, yapt\'fd\'f0\'fd tek \'feey bir DataSet'in b\'fct\'fcn datas\'fdn\'fd, metadatas\'fd olsun olmas\'fdn, farkl\'fd JSON formatlar\'fdnda d\'f6nd\'fcrmektir. Ben her kay\'fdttaki nesne i\'e7in b\'fct\'fcn dataset'i ve alanlar\'fdn listesini JSON dizisi olarak d\'f6nd\'fcren ayr\'fd 2 adet fonksiyon yazd\'fdm.\par
\par
\tab function TServerData.Meta: TJSONArray; \par
\tab var \par
  \tab\tab jRecord: TJSONObject; \par
  \tab\tab I: Integer; \par
\tab begin \par
  \tab\tab ClientDataSet1.Open; \par
  \tab\tab Result := TJSonArray.Create; \par
 \par
  \tab\tab for I := 0 to ClientDataSet1.FieldDefs.Count - 1 do \par
    \tab\tab\tab Result.Add(ClientDataSet1.FieldDefs[I].Name); \par
\tab end; \par
 \par
\tab function TServerData.Data: TJSONArray; \par
\tab var \par
  \tab\tab jRecord: TJSONObject; \par
  \tab\tab I: Integer; \par
\tab begin \par
  \tab\tab ClientDataSet1.Open; \par
  \tab\tab Result := TJSonArray.Create; \par
\tab\tab while not ClientDataSet1.EOF do \par
  \tab\tab begin   \par
    \tab\tab\tab jRecord := TJSONObject.Create; \par
    \tab\tab\tab for I := 0 to ClientDataSet1.FieldCount - 1 do \par
      \tab\tab\tab\tab jRecord.AddPair( \par
        \tab\tab\tab\tab ClientDataSet1.Fields[I].FieldName, \par
        \tab\tab\tab\tab TJSONString.Create (ClientDataSet1.Fields[I].AsString)); \par
    \tab\tab\tab Result.AddElement(jRecord); \par
    \tab\tab\tab ClientDataSet1.Next; \par
  \tab\tab end; \par
\tab end; \par
\par
\tab Verinin miktar\'fdn\'fd azaltmak i\'e7in, tekrar eden alan isimlerini engelleyebilirim, her kay\'fdt i\'e7in bir dizi d\'f6nd\'fcrebilirim, veya null de\'f0eri olan ya da bo\'fe olan alanlar\'fd atlayabilirim. Bu iki metod istemci uygulama taraf\'fdndan dinamik olarak HTML tablosu olu\'feturan jRestClient.html sayfas\'fd y\'fcklendikten sonra y\'fcr\'fct\'fcl\'fcr. HTML dosyas\'fdnda, sadece tablo yap\'fds\'fd bulunur.\par
\par
\tab <table id="result" border="1" cellspacing="0"> \par
  \tab\tab <thead id="head"></thead> \par
  \tab\tab <tbody id="body"></tbody> \par
\tab </table> \par
\par
\tab\'ddstemci uygulama \'f6nce metadatay\'fd y\'fckler ve tablonun ba\'felang\'fd\'e7 sat\'fdr\'fdn\'fd olu\'feturacak diziyi i\'feletir.\par
\par
\tab var theMetaArray = serverMethods().Meta().result; \par
\tab var headMarkup = "<tr>"; // table header \par
\tab for (var j=0; j < theMetaArray.length; j++) \{ \par
    \tab\tab headMarkup = headMarkup +  "<th>" + theMetaArray[j] + "</th>"; \par
\tab\}; \par
\tab headMarkup = headMarkup +  "</tr>"; \par
\tab $("#head").html(headMarkup); \par
\par
\tab\'ddkinci ad\'fdm ger\'e7ek veriyi almak, ve metadata dizisini yerle\'fetirmek i\'e7in kullanmakt\'fdr. Bu olayda JavaScript kodu nesne \'f6zelliklerine notasyon nesnesi olan [\lang1033\f2\ldblquote propertyname\rdblquote ]\lang1055\f1  ile dinamik olarak eri\'feir. Bu demektir ki, \'f6zellik sembol\'fcn\'fc kullanmak (thearray[i].Company gibi) yerine kodun metadata dizisindeki (theMetaArray[j]) \'f6zellik ad\'fdn\'fd okuyarak kullanmas\'fd, \'feu deyimle sonu\'e7lan\'fdr.\par
\par
\tab thearray[i][theMetaArray[j]]) \par
\par
\tab Tablonun v\'fcc\'fcdunu olu\'feturacak JavaScript kodunun tamam\'fd a\'fea\'f0\'fddad\'fdr.\par
\par
\tab thearray = serverMethods().Data().result; \par
\tab var bodyMarkup = ''; // table content \par
\tab for (var i=0; i < thearray.length; i++) \{ \par
  \tab\tab bodyMarkup = bodyMarkup + "<tr>"; \par
  \tab\tab for (var j=0; j < theMetaArray.length; j++) \{ \par
    \tab\tab\tab bodyMarkup = bodyMarkup + "<td>" + \par
      \tab\tab\tab thearray[i][theMetaArray[j]] + "</td>"; \par
    \tab\tab\}; \par
  \tab\tab bodyMarkup = bodyMarkup + "</tr>"; \par
\tab\}; \par
\tab $("#body").html(bodyMarkup);\par
\par
\tab Bu sayfan\'fdn \'e7\'fdkt\'fds\'fd a\'fea\'f0\'fddaki ekran g\'f6r\'fcnt\'fcs\'fc gibi olur. (Makalede ilgili resme bak\'fdn)\par
\cf1\lang1033\f0\fs24\par
\ul\b --- DataTables Bile\'baenini Kullanmak ---\ulnone\b0\par
\par
\cf0\lang1055\f1\fs20\tab  Tekrardan s\'f6yl\'fcyorum ki, bu hizmetler ba\'felang\'fd\'e7 noktas\'fdd\'fdr. Bir HTML tablosunu elle olu\'feturup ona basit \'f6zellikler eklemektense bir jQuery plug-in'inin avanlatjlar\'fdn\'fd kullanarak bir HTML tablosuna kayda de\'f0er \'f6zellikleri ekleyerek, bunu filtrelemei s\'fdralama ve di\'f0er yetenekleri ile birlikte g\'fc\'e7l\'fc bir grid haline getirmeyi tercih ederim.\par
\tab Buna \'f6rnek olarak {\field{\*\fldinst{HYPERLINK "www.datatables.net"}}{\fldrslt{\ul\cf2 www.datatables.net}}}\f1\fs20  adresinden temin edilebilecek, mevcut bir jQuery plug-in'i olan DataTables verilebilir. (Bu plug-ini \'f6zellikle se\'e7tim, \'e7\'fcnk\'fc bununla biraz tecr\'fcbem var, ama bu k\'fct\'fcphanedeki plug-in gibi, jQuery i\'e7in g\'fc\'e7l\'fc di\'f0er grid bile\'feenleri de bulunmaktad\'fdr)\par
\tab Veriyi DataTables bile\'feenine aktarmak i\'e7in pek \'e7ok yol vard\'fdr, ama en basiti, veriyi i\'e7erisinde data (aaData, bir dizi dizisi) ve metadata (aoColumns, kolon ba\'fel\'fdklar\'fdn\'fd ve format stilini i\'e7eren bir nesne dizisi) olan bir nesne i\'e7erecek \'feekilde bir JSON yap\'fds\'fd olarak en ba\'feta olu\'feturmakt\'fdr. Bu nedenle, sunucu taraftati s\'fdn\'fdfa belirlenmi\'fe JSON format\'fdnda d\'f6nd\'fcrme i\'e7in belirlenmi\'fe bir metod ekledim.\par
\par
\tab function TServerData.DataTables: TJSONObject; \par
\tab var \par
  \tab\tab dataArray, subArray: TJSONArray; \par
  \tab\tab metaArray: TJSONArray; \par
  \tab\tab I: Integer; \par
\tab begin \par
  \tab\tab ClientDataSet1.Open; \par
  \tab\tab dataArray:= TJSONArray.Create; \par
 \par
  \tab\tab while not ClientDataSet1.EOF do \par
  \tab\tab begin \par
    \tab\tab\tab subArray := TJSONArray.Create; \par
    \tab\tab\tab for I := 0 to ClientDataSet1.FieldCount - 1 do \par
      \tab\tab\tab\tab subArray.Add(ClientDataSet1.Fields[I].AsString); \par
    \tab\tab\tab dataArray.AddElement(subArray); \par
    \tab\tab\tab ClientDataSet1.Next; \par
  \tab\tab end; \par
 \par
  \tab\tab metaArray := TJSonArray.Create; \par
  \tab\tab for I := 0 to ClientDataSet1.FieldDefs.Count - 1 do \par
  \tab\tab begin \par
    \tab\tab\tab metaArray.Add (TJSONObject.Create( \par
      \tab\tab\tab TJSONPair.Create('sTitle', ClientDataSet1.FieldDefs[I].Name))); \par
  \tab\tab end; \par
 \par
  \tab\tab Result := TJSONObject.Create; \par
  \tab\tab Result.AddPair(TJSONPair.Create('aaData', dataArray)); \par
\tab\tab   Result.AddPair(TJSONPair.Create('aoColumns', metaArray)); \par
\tab end; \par
\par
\tab Bu bile\'feenle (JavaScript kaynak kodunu da dahil ederek) ve mevcut olan bu JSON veri yap\'fds\'fd ile istemci taraf\'fdn kodu \'e7ok b\'fcy\'fck derecede basit hale gelmektedir. Tablosu olan bir forma (basitlik i\'e7in ba\'fel\'fdklar\'fd d\'fczenlenmi\'fe bir bir tane olu\'feturdum) ve JSON datas\'fdn\'fd HTML tablosuna ge\'e7mek i\'e7in dataTable metodunu uygulamak i\'e7in ba\'felang\'fd\'e7ta a\'fea\'f0\'fddaki 2 sat\'fdrl\'fdk kodu eklemek yeterli olacakt\'fdr.\par
\par
\tab var theDataTablesData = serverMethods().DataTables().result; \par
\tab $('#example').dataTable(theDataTablesData); \par
\par
\tab Sonu\'e7 a\'fea\'f0\'fddaki resimdeki gibi g\'f6r\'fcl\'fcr. (Makalede ilgili resme bak\'fdn) Bu data grid i\'e7inde, g\'f6r\'fcnen sat\'fdrlar\'fdn say\'fds\'fdn\'fd se\'e7ebilirsiniz (bu olayda sayfalama istemci taraf\'fdndan yap\'fdlmakta, ama bile\'feeni sunucu taraf\'fdnda sayfalama yapmak i\'e7in ayarlayabilirsiniz.), kolonun ba\'fel\'fd\'f0\'fdna t\'fdklayarak i\'e7eri\'f0ini s\'fdrayalabilirsiniz ve g\'f6r\'fcnen sat\'fdrlar\'fd bir search box ile filtreleyebilirsiniz. (Filtreleme olay\'fd, b\'fct\'fcn kolonlara varsay\'fdlan olarak uygulan\'fdr) \par
\f4\fs22\par
}
 